
smart_home_1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003e0  00800060  000039b4  00003a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800440  00800440  00003e28  2**0
                  ALLOC
  3 .stab         00003fcc  00000000  00000000  00003e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ab8  00000000  00000000  00007df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_1>
       8:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_2>
       c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 19 	call	0x32e2	; 0x32e2 <main>
      8a:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e2       	ldi	r22, 0x27	; 39
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 5d       	subi	r30, 0xD1	; 209
     aca:	fc 4f       	sbci	r31, 0xFC	; 252
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vInit>:
 */


#include "UART_interface.h"

void UART_vInit(const UART_tcfgInitialize *LOCAL_tcfgUART){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_vInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01


	if(LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_5_BITS){
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	b1 f4       	brne	.+44     	; 0xe72 <UART_vInit+0x44>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     e46:	a0 e4       	ldi	r26, 0x40	; 64
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e0 e4       	ldi	r30, 0x40	; 64
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8d 7f       	andi	r24, 0xFD	; 253
     e52:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     e54:	a0 e4       	ldi	r26, 0x40	; 64
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e0 e4       	ldi	r30, 0x40	; 64
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8b 7f       	andi	r24, 0xFB	; 251
     e60:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     e62:	aa e2       	ldi	r26, 0x2A	; 42
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ea e2       	ldi	r30, 0x2A	; 42
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	8c 93       	st	X, r24
     e70:	6b c0       	rjmp	.+214    	; 0xf48 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_6_BITS)){
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	b1 f4       	brne	.+44     	; 0xea8 <UART_vInit+0x7a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     e8a:	a0 e4       	ldi	r26, 0x40	; 64
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e0 e4       	ldi	r30, 0x40	; 64
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     e98:	aa e2       	ldi	r26, 0x2A	; 42
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e2       	ldi	r30, 0x2A	; 42
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
     ea6:	50 c0       	rjmp	.+160    	; 0xf48 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_7_BITS)){
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	80 81       	ld	r24, Z
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	b1 f4       	brne	.+44     	; 0xede <UART_vInit+0xb0>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8d 7f       	andi	r24, 0xFD	; 253
     ebe:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     ece:	aa e2       	ldi	r26, 0x2A	; 42
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e2       	ldi	r30, 0x2A	; 42
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8b 7f       	andi	r24, 0xFB	; 251
     eda:	8c 93       	st	X, r24
     edc:	35 c0       	rjmp	.+106    	; 0xf48 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_8_BITS)){
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	80 81       	ld	r24, Z
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	b1 f4       	brne	.+44     	; 0xf14 <UART_vInit+0xe6>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     ee8:	a0 e4       	ldi	r26, 0x40	; 64
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	82 60       	ori	r24, 0x02	; 2
     ef4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     ef6:	a0 e4       	ldi	r26, 0x40	; 64
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e0 e4       	ldi	r30, 0x40	; 64
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     f04:	aa e2       	ldi	r26, 0x2A	; 42
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e2       	ldi	r30, 0x2A	; 42
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	8c 93       	st	X, r24
     f12:	1a c0       	rjmp	.+52     	; 0xf48 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_9_BITS)){
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	80 81       	ld	r24, Z
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <UART_vInit+0x11a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     f1e:	a0 e4       	ldi	r26, 0x40	; 64
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e0 e4       	ldi	r30, 0x40	; 64
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     f2c:	a0 e4       	ldi	r26, 0x40	; 64
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e0 e4       	ldi	r30, 0x40	; 64
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UCSZ2_BIT);
     f3a:	aa e2       	ldi	r26, 0x2A	; 42
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e2       	ldi	r30, 0x2A	; 42
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	84 60       	ori	r24, 0x04	; 4
     f46:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_DISABLED){
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 81       	ldd	r24, Z+1	; 0x01
     f4e:	88 23       	and	r24, r24
     f50:	79 f4       	brne	.+30     	; 0xf70 <UART_vInit+0x142>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     f52:	a0 e4       	ldi	r26, 0x40	; 64
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e0 e4       	ldi	r30, 0x40	; 64
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UPM1_BIT);
     f60:	a0 e4       	ldi	r26, 0x40	; 64
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 7d       	andi	r24, 0xDF	; 223
     f6c:	8c 93       	st	X, r24
     f6e:	27 c0       	rjmp	.+78     	; 0xfbe <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_EVEN){
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	81 81       	ldd	r24, Z+1	; 0x01
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	79 f4       	brne	.+30     	; 0xf98 <UART_vInit+0x16a>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     f7a:	a0 e4       	ldi	r26, 0x40	; 64
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e0 e4       	ldi	r30, 0x40	; 64
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7e       	andi	r24, 0xEF	; 239
     f86:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     f88:	a0 e4       	ldi	r26, 0x40	; 64
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e0 e4       	ldi	r30, 0x40	; 64
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 62       	ori	r24, 0x20	; 32
     f94:	8c 93       	st	X, r24
     f96:	13 c0       	rjmp	.+38     	; 0xfbe <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_ODD){
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	81 81       	ldd	r24, Z+1	; 0x01
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	71 f4       	brne	.+28     	; 0xfbe <UART_vInit+0x190>
		SET_BIT(UCSRC_REG, UPM0_BIT);
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e4       	ldi	r30, 0x40	; 64
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 61       	ori	r24, 0x10	; 16
     fae:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     fb0:	a0 e4       	ldi	r26, 0x40	; 64
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 62       	ori	r24, 0x20	; 32
     fbc:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_1){
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	88 23       	and	r24, r24
     fc6:	41 f4       	brne	.+16     	; 0xfd8 <UART_vInit+0x1aa>
		CLR_BIT(UCSRC_REG, USBS_BIT);
     fc8:	a0 e4       	ldi	r26, 0x40	; 64
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	8c 93       	st	X, r24
     fd6:	0c c0       	rjmp	.+24     	; 0xff0 <UART_vInit+0x1c2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_2){
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	39 f4       	brne	.+14     	; 0xff0 <UART_vInit+0x1c2>
		SET_BIT(UCSRC_REG, USBS_BIT);
     fe2:	a0 e4       	ldi	r26, 0x40	; 64
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e0 e4       	ldi	r30, 0x40	; 64
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 60       	ori	r24, 0x08	; 8
     fee:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_DISABLED){
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	83 81       	ldd	r24, Z+3	; 0x03
     ff6:	88 23       	and	r24, r24
     ff8:	b1 f4       	brne	.+44     	; 0x1026 <UART_vInit+0x1f8>
		CLR_BIT(UCSRB_REG, RXCIE_BIT);
     ffa:	aa e2       	ldi	r26, 0x2A	; 42
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e2       	ldi	r30, 0x2A	; 42
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 77       	andi	r24, 0x7F	; 127
    1006:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UDRIE_BIT);
    1008:	aa e2       	ldi	r26, 0x2A	; 42
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ea e2       	ldi	r30, 0x2A	; 42
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, TXCIE_BIT);
    1016:	aa e2       	ldi	r26, 0x2A	; 42
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ea e2       	ldi	r30, 0x2A	; 42
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7b       	andi	r24, 0xBF	; 191
    1022:	8c 93       	st	X, r24
    1024:	1a c0       	rjmp	.+52     	; 0x105a <UART_vInit+0x22c>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_ENABLED){
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	83 81       	ldd	r24, Z+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	a9 f4       	brne	.+42     	; 0x105a <UART_vInit+0x22c>
		SET_BIT(UCSRB_REG, RXCIE_BIT);
    1030:	aa e2       	ldi	r26, 0x2A	; 42
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ea e2       	ldi	r30, 0x2A	; 42
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 68       	ori	r24, 0x80	; 128
    103c:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UDRIE_BIT);
    103e:	aa e2       	ldi	r26, 0x2A	; 42
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ea e2       	ldi	r30, 0x2A	; 42
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 62       	ori	r24, 0x20	; 32
    104a:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, TXCIE_BIT);
    104c:	aa e2       	ldi	r26, 0x2A	; 42
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e2       	ldi	r30, 0x2A	; 42
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_ASYNCHRONOUS){
    105a:	e9 81       	ldd	r30, Y+1	; 0x01
    105c:	fa 81       	ldd	r31, Y+2	; 0x02
    105e:	87 81       	ldd	r24, Z+7	; 0x07
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	41 f4       	brne	.+16     	; 0x1074 <UART_vInit+0x246>
		CLR_BIT(UCSRC_REG, UMSEL_BIT);
    1064:	a0 e4       	ldi	r26, 0x40	; 64
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e0 e4       	ldi	r30, 0x40	; 64
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7b       	andi	r24, 0xBF	; 191
    1070:	8c 93       	st	X, r24
    1072:	0c c0       	rjmp	.+24     	; 0x108c <UART_vInit+0x25e>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_SYNCHRONOUS){
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	87 81       	ldd	r24, Z+7	; 0x07
    107a:	88 23       	and	r24, r24
    107c:	39 f4       	brne	.+14     	; 0x108c <UART_vInit+0x25e>
		SET_BIT(UCSRC_REG, UMSEL_BIT);
    107e:	a0 e4       	ldi	r26, 0x40	; 64
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e0 e4       	ldi	r30, 0x40	; 64
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_2X_SPEED){
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	80 85       	ldd	r24, Z+8	; 0x08
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	c1 f4       	brne	.+48     	; 0x10c6 <UART_vInit+0x298>
		SET_BIT(UCSRA_REG, U2X_BIT);
    1096:	ab e2       	ldi	r26, 0x2B	; 43
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e2       	ldi	r30, 0x2B	; 43
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X;
    10a4:	a9 e2       	ldi	r26, 0x29	; 41
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	84 81       	ldd	r24, Z+4	; 0x04
    10ae:	95 81       	ldd	r25, Z+5	; 0x05
    10b0:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X)>>8);
    10b2:	a0 e4       	ldi	r26, 0x40	; 64
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e9 81       	ldd	r30, Y+1	; 0x01
    10b8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ba:	84 81       	ldd	r24, Z+4	; 0x04
    10bc:	95 81       	ldd	r25, Z+5	; 0x05
    10be:	89 2f       	mov	r24, r25
    10c0:	99 27       	eor	r25, r25
    10c2:	8c 93       	st	X, r24
    10c4:	1d c0       	rjmp	.+58     	; 0x1100 <UART_vInit+0x2d2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_1X_SPEED){
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 85       	ldd	r24, Z+8	; 0x08
    10cc:	88 23       	and	r24, r24
    10ce:	c1 f4       	brne	.+48     	; 0x1100 <UART_vInit+0x2d2>
		CLR_BIT(UCSRA_REG, U2X_BIT);
    10d0:	ab e2       	ldi	r26, 0x2B	; 43
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	eb e2       	ldi	r30, 0x2B	; 43
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8d 7f       	andi	r24, 0xFD	; 253
    10dc:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X;
    10de:	a9 e2       	ldi	r26, 0x29	; 41
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	86 81       	ldd	r24, Z+6	; 0x06
    10e8:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
    10ea:	a0 e4       	ldi	r26, 0x40	; 64
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	86 81       	ldd	r24, Z+6	; 0x06
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	89 2f       	mov	r24, r25
    10fa:	99 0f       	add	r25, r25
    10fc:	99 0b       	sbc	r25, r25
    10fe:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <UART_vEnable>:

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <UART_vEnable+0x6>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
    1118:	aa e2       	ldi	r26, 0x2A	; 42
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ea e2       	ldi	r30, 0x2A	; 42
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 61       	ori	r24, 0x10	; 16
    1124:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
    1126:	aa e2       	ldi	r26, 0x2A	; 42
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ea e2       	ldi	r30, 0x2A	; 42
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 60       	ori	r24, 0x08	; 8
    1132:	8c 93       	st	X, r24
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <UART_vDisable+0x6>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
    114c:	aa e2       	ldi	r26, 0x2A	; 42
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ea e2       	ldi	r30, 0x2A	; 42
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8f 7e       	andi	r24, 0xEF	; 239
    1158:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
    115a:	aa e2       	ldi	r26, 0x2A	; 42
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ea e2       	ldi	r30, 0x2A	; 42
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	87 7f       	andi	r24, 0xF7	; 247
    1166:	8c 93       	st	X, r24
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
    117e:	eb e2       	ldi	r30, 0x2B	; 43
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	82 95       	swap	r24
    1186:	86 95       	lsr	r24
    1188:	87 70       	andi	r24, 0x07	; 7
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	90 70       	andi	r25, 0x00	; 0
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	a1 f3       	breq	.-24     	; 0x117e <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
    1196:	ec e2       	ldi	r30, 0x2C	; 44
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	80 83       	st	Z, r24
}
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
    11b0:	eb e2       	ldi	r30, 0x2B	; 43
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 1f       	adc	r24, r24
    11b8:	88 27       	eor	r24, r24
    11ba:	88 1f       	adc	r24, r24
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	c1 f7       	brne	.-16     	; 0x11b0 <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
    11c0:	ec e2       	ldi	r30, 0x2C	; 44
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    11c8:	ab e2       	ldi	r26, 0x2B	; 43
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e2       	ldi	r30, 0x2B	; 43
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	8c 93       	st	X, r24
	return local_u8Data;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <UART_vSendString+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	20 81       	ld	r18, Z
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	82 2f       	mov	r24, r18
    1202:	0e 94 b9 08 	call	0x1172	; 0x1172 <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
    1206:	e9 81       	ldd	r30, Y+1	; 0x01
    1208:	fa 81       	ldd	r31, Y+2	; 0x02
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	81 f7       	brne	.-32     	; 0x11f0 <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <UART_vClearBuffer>:

void UART_vClearBuffer(){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	u8 temp;
	temp = UDR_REG;
    1224:	ec e2       	ldi	r30, 0x2C	; 44
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    122c:	ab e2       	ldi	r26, 0x2B	; 43
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e2       	ldi	r30, 0x2B	; 43
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	8c 93       	st	X, r24
}
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <GIE_vEnableInterrupts>:
 */

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
    124a:	af e5       	ldi	r26, 0x5F	; 95
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ef e5       	ldi	r30, 0x5F	; 95
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	8c 93       	st	X, r24
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
    1266:	af e5       	ldi	r26, 0x5F	; 95
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ef e5       	ldi	r30, 0x5F	; 95
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8f 77       	andi	r24, 0x7F	; 127
    1272:	8c 93       	st	X, r24
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <EXTI_vEnableEXTI>:

#include "EXTI_interface.h"

void (*pf_Callback_Functions[3])(void);

void EXTI_vEnableEXTI(const EXTI_cfg *INTx){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <EXTI_vEnableEXTI+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <EXTI_vEnableEXTI+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    128a:	e9 81       	ldd	r30, Y+1	; 0x01
    128c:	fa 81       	ldd	r31, Y+2	; 0x02
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3c 83       	std	Y+4, r19	; 0x04
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <EXTI_vEnableEXTI+0x2a>
    12a2:	6c c0       	rjmp	.+216    	; 0x137c <EXTI_vEnableEXTI+0x102>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <EXTI_vEnableEXTI+0x36>
    12ae:	c7 c0       	rjmp	.+398    	; 0x143e <EXTI_vEnableEXTI+0x1c4>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	09 f0       	breq	.+2      	; 0x12ba <EXTI_vEnableEXTI+0x40>
    12b8:	f7 c0       	rjmp	.+494    	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
	case INT0:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	88 23       	and	r24, r24
    12c2:	79 f4       	brne	.+30     	; 0x12e2 <EXTI_vEnableEXTI+0x68>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOW;
    12c4:	a5 e5       	ldi	r26, 0x55	; 85
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e5       	ldi	r30, 0x55	; 85
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8c 7f       	andi	r24, 0xFC	; 252
    12d0:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    12d2:	ab e5       	ldi	r26, 0x5B	; 91
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e5       	ldi	r30, 0x5B	; 91
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 64       	ori	r24, 0x40	; 64
    12de:	8c 93       	st	X, r24
    12e0:	3d c0       	rjmp	.+122    	; 0x135c <EXTI_vEnableEXTI+0xe2>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	81 81       	ldd	r24, Z+1	; 0x01
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	81 f4       	brne	.+32     	; 0x130c <EXTI_vEnableEXTI+0x92>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOGICAL;
    12ec:	a5 e5       	ldi	r26, 0x55	; 85
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e5       	ldi	r30, 0x55	; 85
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8c 7f       	andi	r24, 0xFC	; 252
    12f8:	81 60       	ori	r24, 0x01	; 1
    12fa:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    12fc:	ab e5       	ldi	r26, 0x5B	; 91
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e5       	ldi	r30, 0x5B	; 91
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	8c 93       	st	X, r24
    130a:	28 c0       	rjmp	.+80     	; 0x135c <EXTI_vEnableEXTI+0xe2>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	81 f4       	brne	.+32     	; 0x1336 <EXTI_vEnableEXTI+0xbc>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_FALLING;
    1316:	a5 e5       	ldi	r26, 0x55	; 85
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e5       	ldi	r30, 0x55	; 85
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8c 7f       	andi	r24, 0xFC	; 252
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    1326:	ab e5       	ldi	r26, 0x5B	; 91
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	eb e5       	ldi	r30, 0x5B	; 91
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 64       	ori	r24, 0x40	; 64
    1332:	8c 93       	st	X, r24
    1334:	13 c0       	rjmp	.+38     	; 0x135c <EXTI_vEnableEXTI+0xe2>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	81 81       	ldd	r24, Z+1	; 0x01
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	71 f4       	brne	.+28     	; 0x135c <EXTI_vEnableEXTI+0xe2>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_RISING;
    1340:	a5 e5       	ldi	r26, 0x55	; 85
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e5       	ldi	r30, 0x55	; 85
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	83 60       	ori	r24, 0x03	; 3
    134c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    134e:	ab e5       	ldi	r26, 0x5B	; 91
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	eb e5       	ldi	r30, 0x5B	; 91
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 64       	ori	r24, 0x40	; 64
    135a:	8c 93       	st	X, r24
		}
		else{ /* Do Nothing */ }
		if(INTx->pf_Callback){
    135c:	e9 81       	ldd	r30, Y+1	; 0x01
    135e:	fa 81       	ldd	r31, Y+2	; 0x02
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	09 f4       	brne	.+2      	; 0x136a <EXTI_vEnableEXTI+0xf0>
    1368:	9f c0       	rjmp	.+318    	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
			pf_Callback_Functions[0] = INTx->pf_Callback;
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	93 81       	ldd	r25, Z+3	; 0x03
    1372:	90 93 42 04 	sts	0x0442, r25
    1376:	80 93 41 04 	sts	0x0441, r24
    137a:	96 c0       	rjmp	.+300    	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
		}
		else{ /* Do Nothing */ }
		break;
	case INT1:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	81 81       	ldd	r24, Z+1	; 0x01
    1382:	88 23       	and	r24, r24
    1384:	79 f4       	brne	.+30     	; 0x13a4 <EXTI_vEnableEXTI+0x12a>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOW;
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	83 7f       	andi	r24, 0xF3	; 243
    1392:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1394:	ab e5       	ldi	r26, 0x5B	; 91
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e5       	ldi	r30, 0x5B	; 91
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	8c 93       	st	X, r24
    13a2:	3d c0       	rjmp	.+122    	; 0x141e <EXTI_vEnableEXTI+0x1a4>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	81 81       	ldd	r24, Z+1	; 0x01
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	81 f4       	brne	.+32     	; 0x13ce <EXTI_vEnableEXTI+0x154>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOGICAL;
    13ae:	a5 e5       	ldi	r26, 0x55	; 85
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e5 e5       	ldi	r30, 0x55	; 85
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	83 7f       	andi	r24, 0xF3	; 243
    13ba:	84 60       	ori	r24, 0x04	; 4
    13bc:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    13be:	ab e5       	ldi	r26, 0x5B	; 91
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	eb e5       	ldi	r30, 0x5B	; 91
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 68       	ori	r24, 0x80	; 128
    13ca:	8c 93       	st	X, r24
    13cc:	28 c0       	rjmp	.+80     	; 0x141e <EXTI_vEnableEXTI+0x1a4>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	81 f4       	brne	.+32     	; 0x13f8 <EXTI_vEnableEXTI+0x17e>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_FALLING;
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	83 7f       	andi	r24, 0xF3	; 243
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    13e8:	ab e5       	ldi	r26, 0x5B	; 91
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	eb e5       	ldi	r30, 0x5B	; 91
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	8c 93       	st	X, r24
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <EXTI_vEnableEXTI+0x1a4>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	81 81       	ldd	r24, Z+1	; 0x01
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	71 f4       	brne	.+28     	; 0x141e <EXTI_vEnableEXTI+0x1a4>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_RISING;
    1402:	a5 e5       	ldi	r26, 0x55	; 85
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e5       	ldi	r30, 0x55	; 85
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8c 60       	ori	r24, 0x0C	; 12
    140e:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1410:	ab e5       	ldi	r26, 0x5B	; 91
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e5       	ldi	r30, 0x5B	; 91
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 68       	ori	r24, 0x80	; 128
    141c:	8c 93       	st	X, r24
		}
		else{ /* Do Nothing */ }
		if(INTx->pf_Callback){
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	09 f4       	brne	.+2      	; 0x142c <EXTI_vEnableEXTI+0x1b2>
    142a:	3e c0       	rjmp	.+124    	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
			pf_Callback_Functions[1] = INTx->pf_Callback;
    142c:	e9 81       	ldd	r30, Y+1	; 0x01
    142e:	fa 81       	ldd	r31, Y+2	; 0x02
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	90 93 44 04 	sts	0x0444, r25
    1438:	80 93 43 04 	sts	0x0443, r24
    143c:	35 c0       	rjmp	.+106    	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
		}
		else{ /* Do Nothing */ }
		break;
	case INT2:
		if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	81 81       	ldd	r24, Z+1	; 0x01
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	79 f4       	brne	.+30     	; 0x1466 <EXTI_vEnableEXTI+0x1ec>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_FALLING;
    1448:	a4 e5       	ldi	r26, 0x54	; 84
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e4 e5       	ldi	r30, 0x54	; 84
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8f 7b       	andi	r24, 0xBF	; 191
    1454:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    1456:	ab e5       	ldi	r26, 0x5B	; 91
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e5       	ldi	r30, 0x5B	; 91
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 62       	ori	r24, 0x20	; 32
    1462:	8c 93       	st	X, r24
    1464:	13 c0       	rjmp	.+38     	; 0x148c <EXTI_vEnableEXTI+0x212>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    1466:	e9 81       	ldd	r30, Y+1	; 0x01
    1468:	fa 81       	ldd	r31, Y+2	; 0x02
    146a:	81 81       	ldd	r24, Z+1	; 0x01
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	71 f4       	brne	.+28     	; 0x148c <EXTI_vEnableEXTI+0x212>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_RISING;
    1470:	a4 e5       	ldi	r26, 0x54	; 84
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e4 e5       	ldi	r30, 0x54	; 84
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    147e:	ab e5       	ldi	r26, 0x5B	; 91
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e5       	ldi	r30, 0x5B	; 91
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 62       	ori	r24, 0x20	; 32
    148a:	8c 93       	st	X, r24
		}
		else{ /* Do Nothing */ }
		if(INTx->pf_Callback){
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	fa 81       	ldd	r31, Y+2	; 0x02
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	41 f0       	breq	.+16     	; 0x14a8 <EXTI_vEnableEXTI+0x22e>
			pf_Callback_Functions[2] = INTx->pf_Callback;
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	90 93 46 04 	sts	0x0446, r25
    14a4:	80 93 45 04 	sts	0x0445, r24
		}
		else{ /* Do Nothing */ }
		break;
	default: /* Do Nothing */ break;
	}
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <EXTI_vDisableEXTI>:

void EXTI_vDisableEXTI(const EXTI_cfg *INTx){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <EXTI_vDisableEXTI+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <EXTI_vDisableEXTI+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	89 f0       	breq	.+34     	; 0x1500 <EXTI_vDisableEXTI+0x4a>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	a1 f0       	breq	.+40     	; 0x1510 <EXTI_vDisableEXTI+0x5a>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	b9 f4       	brne	.+46     	; 0x151e <EXTI_vDisableEXTI+0x68>
	case INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    14f0:	ab e5       	ldi	r26, 0x5B	; 91
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e5       	ldi	r30, 0x5B	; 91
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	8c 93       	st	X, r24
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <EXTI_vDisableEXTI+0x68>
		break;
	case INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    1500:	ab e5       	ldi	r26, 0x5B	; 91
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	eb e5       	ldi	r30, 0x5B	; 91
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8f 77       	andi	r24, 0x7F	; 127
    150c:	8c 93       	st	X, r24
    150e:	07 c0       	rjmp	.+14     	; 0x151e <EXTI_vDisableEXTI+0x68>
		break;
	case INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    1510:	ab e5       	ldi	r26, 0x5B	; 91
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e5       	ldi	r30, 0x5B	; 91
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7d       	andi	r24, 0xDF	; 223
    151c:	8c 93       	st	X, r24
		break;
	}
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <__vector_1>:

/* INT0_ISR */
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	if(pf_Callback_Functions[0])
    1556:	80 91 41 04 	lds	r24, 0x0441
    155a:	90 91 42 04 	lds	r25, 0x0442
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	29 f0       	breq	.+10     	; 0x156c <__vector_1+0x40>
		pf_Callback_Functions[0]();
    1562:	e0 91 41 04 	lds	r30, 0x0441
    1566:	f0 91 42 04 	lds	r31, 0x0442
    156a:	09 95       	icall
}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_2>:

/* INT1_ISR */
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	if(pf_Callback_Functions[1])
    15bc:	80 91 43 04 	lds	r24, 0x0443
    15c0:	90 91 44 04 	lds	r25, 0x0444
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <__vector_2+0x40>
		pf_Callback_Functions[1]();
    15c8:	e0 91 43 04 	lds	r30, 0x0443
    15cc:	f0 91 44 04 	lds	r31, 0x0444
    15d0:	09 95       	icall
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_3>:

/* INT2_ISR */
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	if(pf_Callback_Functions[2])
    1622:	80 91 45 04 	lds	r24, 0x0445
    1626:	90 91 46 04 	lds	r25, 0x0446
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	29 f0       	breq	.+10     	; 0x1638 <__vector_3+0x40>
		pf_Callback_Functions[2]();
    162e:	e0 91 45 04 	lds	r30, 0x0445
    1632:	f0 91 46 04 	lds	r31, 0x0446
    1636:	09 95       	icall
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <MDIO_vSetPinDirection>:
/* include for every header file (DIO) */
#include "DIO_Interface.h"
#include "DIO_Private.h"

void MDIO_vSetPinDirection(u8 A_u8portNumber, u8 A_u8pinNumber, u8 A_u8dir)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	27 97       	sbiw	r28, 0x07	; 7
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	6a 83       	std	Y+2, r22	; 0x02
    1676:	4b 83       	std	Y+3, r20	; 0x03
	if (A_u8dir == INPUT)
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <MDIO_vSetPinDirection+0x22>
    167e:	6f c0       	rjmp	.+222    	; 0x175e <MDIO_vSetPinDirection+0x100>
	{
		switch(A_u8portNumber)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3f 83       	std	Y+7, r19	; 0x07
    1688:	2e 83       	std	Y+6, r18	; 0x06
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	49 f1       	breq	.+82     	; 0x16e6 <MDIO_vSetPinDirection+0x88>
    1694:	2e 81       	ldd	r18, Y+6	; 0x06
    1696:	3f 81       	ldd	r19, Y+7	; 0x07
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <MDIO_vSetPinDirection+0x4a>
    169e:	8e 81       	ldd	r24, Y+6	; 0x06
    16a0:	9f 81       	ldd	r25, Y+7	; 0x07
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <MDIO_vSetPinDirection+0x60>
    16a6:	c9 c0       	rjmp	.+402    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
    16a8:	2e 81       	ldd	r18, Y+6	; 0x06
    16aa:	3f 81       	ldd	r19, Y+7	; 0x07
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	71 f1       	breq	.+92     	; 0x170e <MDIO_vSetPinDirection+0xb0>
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	e9 f1       	breq	.+122    	; 0x1736 <MDIO_vSetPinDirection+0xd8>
    16bc:	be c0       	rjmp	.+380    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		{
		case PORT_A: CLR_BIT(DDRA,A_u8pinNumber); break;
    16be:	aa e3       	ldi	r26, 0x3A	; 58
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ea e3       	ldi	r30, 0x3A	; 58
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	40 81       	ld	r20, Z
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <MDIO_vSetPinDirection+0x7c>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <MDIO_vSetPinDirection+0x78>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	aa c0       	rjmp	.+340    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_B: CLR_BIT(DDRB,A_u8pinNumber); break;
    16e6:	a7 e3       	ldi	r26, 0x37	; 55
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e7 e3       	ldi	r30, 0x37	; 55
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	40 81       	ld	r20, Z
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <MDIO_vSetPinDirection+0xa4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <MDIO_vSetPinDirection+0xa0>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	96 c0       	rjmp	.+300    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_C: CLR_BIT(DDRC,A_u8pinNumber); break;
    170e:	a4 e3       	ldi	r26, 0x34	; 52
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e4 e3       	ldi	r30, 0x34	; 52
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	40 81       	ld	r20, Z
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <MDIO_vSetPinDirection+0xcc>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <MDIO_vSetPinDirection+0xc8>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	82 c0       	rjmp	.+260    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_D: CLR_BIT(DDRD,A_u8pinNumber); break;
    1736:	a1 e3       	ldi	r26, 0x31	; 49
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e1 e3       	ldi	r30, 0x31	; 49
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	40 81       	ld	r20, Z
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <MDIO_vSetPinDirection+0xf4>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <MDIO_vSetPinDirection+0xf0>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	6e c0       	rjmp	.+220    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		}
	}
	else if (A_u8dir == OUTPUT)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	09 f0       	breq	.+2      	; 0x1766 <MDIO_vSetPinDirection+0x108>
    1764:	6a c0       	rjmp	.+212    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
	{
		switch(A_u8portNumber)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3d 83       	std	Y+5, r19	; 0x05
    176e:	2c 83       	std	Y+4, r18	; 0x04
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	41 f1       	breq	.+80     	; 0x17ca <MDIO_vSetPinDirection+0x16c>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <MDIO_vSetPinDirection+0x130>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	61 f0       	breq	.+24     	; 0x17a4 <MDIO_vSetPinDirection+0x146>
    178c:	56 c0       	rjmp	.+172    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	61 f1       	breq	.+88     	; 0x17f0 <MDIO_vSetPinDirection+0x192>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	d1 f1       	breq	.+116    	; 0x1816 <MDIO_vSetPinDirection+0x1b8>
    17a2:	4b c0       	rjmp	.+150    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		{
		case PORT_A: SET_BIT(DDRA,A_u8pinNumber); break;
    17a4:	aa e3       	ldi	r26, 0x3A	; 58
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	ea e3       	ldi	r30, 0x3A	; 58
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	40 81       	ld	r20, Z
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <MDIO_vSetPinDirection+0x162>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <MDIO_vSetPinDirection+0x15e>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	38 c0       	rjmp	.+112    	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_B: SET_BIT(DDRB,A_u8pinNumber); break;
    17ca:	a7 e3       	ldi	r26, 0x37	; 55
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e7 e3       	ldi	r30, 0x37	; 55
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	40 81       	ld	r20, Z
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <MDIO_vSetPinDirection+0x188>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <MDIO_vSetPinDirection+0x184>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	25 c0       	rjmp	.+74     	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_C: SET_BIT(DDRC,A_u8pinNumber); break;
    17f0:	a4 e3       	ldi	r26, 0x34	; 52
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e4 e3       	ldi	r30, 0x34	; 52
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	40 81       	ld	r20, Z
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <MDIO_vSetPinDirection+0x1ae>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <MDIO_vSetPinDirection+0x1aa>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	12 c0       	rjmp	.+36     	; 0x183a <MDIO_vSetPinDirection+0x1dc>
		case PORT_D: SET_BIT(DDRD,A_u8pinNumber); break;
    1816:	a1 e3       	ldi	r26, 0x31	; 49
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 e3       	ldi	r30, 0x31	; 49
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	40 81       	ld	r20, Z
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <MDIO_vSetPinDirection+0x1d4>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <MDIO_vSetPinDirection+0x1d0>
    1836:	84 2b       	or	r24, r20
    1838:	8c 93       	st	X, r24
		}
	}else{
		/* Do nothing */
	}
}
    183a:	27 96       	adiw	r28, 0x07	; 7
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <MDIO_vSetPortDirection>:

/* DDRA = 90; */

void MDIO_vSetPortDirection(u8 A_u8portNumber, u8 A_u8dir)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <MDIO_vSetPortDirection+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <MDIO_vSetPortDirection+0x8>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8portNumber){
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3c 83       	std	Y+4, r19	; 0x04
    1864:	2b 83       	std	Y+3, r18	; 0x03
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <MDIO_vSetPortDirection+0x58>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <MDIO_vSetPortDirection+0x38>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	61 f0       	breq	.+24     	; 0x189a <MDIO_vSetPortDirection+0x4e>
    1882:	1e c0       	rjmp	.+60     	; 0x18c0 <MDIO_vSetPortDirection+0x74>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <MDIO_vSetPortDirection+0x62>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	81 f0       	breq	.+32     	; 0x18b8 <MDIO_vSetPortDirection+0x6c>
    1898:	13 c0       	rjmp	.+38     	; 0x18c0 <MDIO_vSetPortDirection+0x74>
	case PORT_A:
		DDRA = A_u8dir; break;
    189a:	ea e3       	ldi	r30, 0x3A	; 58
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	80 83       	st	Z, r24
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <MDIO_vSetPortDirection+0x74>
	case PORT_B:
		DDRB = A_u8dir; break;
    18a4:	e7 e3       	ldi	r30, 0x37	; 55
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	80 83       	st	Z, r24
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <MDIO_vSetPortDirection+0x74>
	case PORT_C:
		DDRC = A_u8dir; break;
    18ae:	e4 e3       	ldi	r30, 0x34	; 52
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 83       	st	Z, r24
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <MDIO_vSetPortDirection+0x74>
	case PORT_D:
		DDRD = A_u8dir; break;
    18b8:	e1 e3       	ldi	r30, 0x31	; 49
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	80 83       	st	Z, r24
	}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <MDIO_vSetPinValue>:

/* pin high/low */

void MDIO_vSetPinValue(u8 A_u8portNumber, u8 A_u8pinNumber, u8 A_u8val)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	27 97       	sbiw	r28, 0x07	; 7
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6a 83       	std	Y+2, r22	; 0x02
    18e6:	4b 83       	std	Y+3, r20	; 0x03
	//if it is output high
	if(A_u8val == HIGH){
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <MDIO_vSetPinValue+0x22>
    18ee:	6b c0       	rjmp	.+214    	; 0x19c6 <MDIO_vSetPinValue+0xf8>
		switch(A_u8portNumber){
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3f 83       	std	Y+7, r19	; 0x07
    18f8:	2e 83       	std	Y+6, r18	; 0x06
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	41 f1       	breq	.+80     	; 0x1954 <MDIO_vSetPinValue+0x86>
    1904:	2e 81       	ldd	r18, Y+6	; 0x06
    1906:	3f 81       	ldd	r19, Y+7	; 0x07
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <MDIO_vSetPinValue+0x4a>
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	61 f0       	breq	.+24     	; 0x192e <MDIO_vSetPinValue+0x60>
    1916:	c9 c0       	rjmp	.+402    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
    1918:	2e 81       	ldd	r18, Y+6	; 0x06
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	61 f1       	breq	.+88     	; 0x197a <MDIO_vSetPinValue+0xac>
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f1       	breq	.+116    	; 0x19a0 <MDIO_vSetPinValue+0xd2>
    192c:	be c0       	rjmp	.+380    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
		case PORT_A:
			//PORTA |= (1<<A_u8pinNumber);
			SET_BIT(PORTA, A_u8pinNumber);
    192e:	ab e3       	ldi	r26, 0x3B	; 59
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	eb e3       	ldi	r30, 0x3B	; 59
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	40 81       	ld	r20, Z
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <MDIO_vSetPinValue+0x7c>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <MDIO_vSetPinValue+0x78>
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	ab c0       	rjmp	.+342    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_B:
			//PORTB |= (1<<A_u8pinNumber);
			SET_BIT(PORTB, A_u8pinNumber);
    1954:	a8 e3       	ldi	r26, 0x38	; 56
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e8 e3       	ldi	r30, 0x38	; 56
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	40 81       	ld	r20, Z
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <MDIO_vSetPinValue+0xa2>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <MDIO_vSetPinValue+0x9e>
    1974:	84 2b       	or	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	98 c0       	rjmp	.+304    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_C:
			//PORTC |= (1<<A_u8pinNumber);
			SET_BIT(PORTC, A_u8pinNumber);
    197a:	a5 e3       	ldi	r26, 0x35	; 53
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e3       	ldi	r30, 0x35	; 53
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	40 81       	ld	r20, Z
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <MDIO_vSetPinValue+0xc8>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <MDIO_vSetPinValue+0xc4>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	85 c0       	rjmp	.+266    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_D:
			//PORTD |= (1<<A_u8pinNumber);
			SET_BIT(PORTD, A_u8pinNumber);
    19a0:	a2 e3       	ldi	r26, 0x32	; 50
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	40 81       	ld	r20, Z
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <MDIO_vSetPinValue+0xee>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <MDIO_vSetPinValue+0xea>
    19c0:	84 2b       	or	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	72 c0       	rjmp	.+228    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		}
	}else if(A_u8val == LOW){
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 23       	and	r24, r24
    19ca:	09 f0       	breq	.+2      	; 0x19ce <MDIO_vSetPinValue+0x100>
    19cc:	6e c0       	rjmp	.+220    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
		switch(A_u8portNumber){
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	49 f1       	breq	.+82     	; 0x1a34 <MDIO_vSetPinValue+0x166>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <MDIO_vSetPinValue+0x128>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <MDIO_vSetPinValue+0x13e>
    19f4:	5a c0       	rjmp	.+180    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
    19f6:	2c 81       	ldd	r18, Y+4	; 0x04
    19f8:	3d 81       	ldd	r19, Y+5	; 0x05
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	71 f1       	breq	.+92     	; 0x1a5c <MDIO_vSetPinValue+0x18e>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	e9 f1       	breq	.+122    	; 0x1a84 <MDIO_vSetPinValue+0x1b6>
    1a0a:	4f c0       	rjmp	.+158    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
		case PORT_A:
			//PORTA &= ~(A_u8pinNumber);
			CLR_BIT(PORTA, A_u8pinNumber);
    1a0c:	ab e3       	ldi	r26, 0x3B	; 59
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e3       	ldi	r30, 0x3B	; 59
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	40 81       	ld	r20, Z
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <MDIO_vSetPinValue+0x15a>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <MDIO_vSetPinValue+0x156>
    1a2c:	80 95       	com	r24
    1a2e:	84 23       	and	r24, r20
    1a30:	8c 93       	st	X, r24
    1a32:	3b c0       	rjmp	.+118    	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_B:
			//PORTB &= ~(A_u8pinNumber);
			CLR_BIT(PORTB, A_u8pinNumber);
    1a34:	a8 e3       	ldi	r26, 0x38	; 56
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	40 81       	ld	r20, Z
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <MDIO_vSetPinValue+0x182>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <MDIO_vSetPinValue+0x17e>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	27 c0       	rjmp	.+78     	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_C:
			//PORTC &= ~(A_u8pinNumber);
			CLR_BIT(PORTC, A_u8pinNumber);
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	40 81       	ld	r20, Z
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <MDIO_vSetPinValue+0x1aa>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <MDIO_vSetPinValue+0x1a6>
    1a7c:	80 95       	com	r24
    1a7e:	84 23       	and	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	13 c0       	rjmp	.+38     	; 0x1aaa <MDIO_vSetPinValue+0x1dc>
			break;
		case PORT_D:
			//PORTD &= ~(A_u8pinNumber);
			CLR_BIT(PORTD, A_u8pinNumber);
    1a84:	a2 e3       	ldi	r26, 0x32	; 50
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	40 81       	ld	r20, Z
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <MDIO_vSetPinValue+0x1d2>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <MDIO_vSetPinValue+0x1ce>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
			break;
		}
	}else{
		/* Do nothing */
	}
}
    1aaa:	27 96       	adiw	r28, 0x07	; 7
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <MDIO_vSetPortValue>:

/* port pins ===> val */
void MDIO_vSetPortValue(u8 A_u8portNumber, u8 A_u8Val)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <MDIO_vSetPortValue+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <MDIO_vSetPortValue+0x8>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8portNumber){
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3c 83       	std	Y+4, r19	; 0x04
    1ad4:	2b 83       	std	Y+3, r18	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	d1 f0       	breq	.+52     	; 0x1b14 <MDIO_vSetPortValue+0x58>
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <MDIO_vSetPortValue+0x38>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <MDIO_vSetPortValue+0x4e>
    1af2:	1e c0       	rjmp	.+60     	; 0x1b30 <MDIO_vSetPortValue+0x74>
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <MDIO_vSetPortValue+0x62>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <MDIO_vSetPortValue+0x6c>
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <MDIO_vSetPortValue+0x74>
	case PORT_A: PORTA = A_u8Val; break;
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
    1b12:	0e c0       	rjmp	.+28     	; 0x1b30 <MDIO_vSetPortValue+0x74>
	case PORT_B: PORTB = A_u8Val; break;
    1b14:	e8 e3       	ldi	r30, 0x38	; 56
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	80 83       	st	Z, r24
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <MDIO_vSetPortValue+0x74>
	case PORT_C: PORTC = A_u8Val; break;
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 83       	st	Z, r24
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <MDIO_vSetPortValue+0x74>
	case PORT_D: PORTD = A_u8Val; break;
    1b28:	e2 e3       	ldi	r30, 0x32	; 50
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	80 83       	st	Z, r24
	}
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <MDIO_vTogglePinValue>:

/* high ==> low, low ===> high */
void MDIO_vTogglePinValue(u8 A_u8portNumber, u8 A_u8pinNumber)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <MDIO_vTogglePinValue+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <MDIO_vTogglePinValue+0x8>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8portNumber){
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3c 83       	std	Y+4, r19	; 0x04
    1b56:	2b 83       	std	Y+3, r18	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	91 05       	cpc	r25, r1
    1b60:	41 f1       	breq	.+80     	; 0x1bb2 <MDIO_vTogglePinValue+0x74>
    1b62:	2b 81       	ldd	r18, Y+3	; 0x03
    1b64:	3c 81       	ldd	r19, Y+4	; 0x04
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <MDIO_vTogglePinValue+0x38>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <MDIO_vTogglePinValue+0x4e>
    1b74:	56 c0       	rjmp	.+172    	; 0x1c22 <MDIO_vTogglePinValue+0xe4>
    1b76:	2b 81       	ldd	r18, Y+3	; 0x03
    1b78:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	61 f1       	breq	.+88     	; 0x1bd8 <MDIO_vTogglePinValue+0x9a>
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	91 05       	cpc	r25, r1
    1b88:	d1 f1       	breq	.+116    	; 0x1bfe <MDIO_vTogglePinValue+0xc0>
    1b8a:	4b c0       	rjmp	.+150    	; 0x1c22 <MDIO_vTogglePinValue+0xe4>
	case PORT_A:
		//PORTA ^= (1<<A_u8pinNumber);
		TOG_BIT(PORTA,A_u8pinNumber);
    1b8c:	ab e3       	ldi	r26, 0x3B	; 59
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e3       	ldi	r30, 0x3B	; 59
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	40 81       	ld	r20, Z
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <MDIO_vTogglePinValue+0x6a>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <MDIO_vTogglePinValue+0x66>
    1bac:	84 27       	eor	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	38 c0       	rjmp	.+112    	; 0x1c22 <MDIO_vTogglePinValue+0xe4>
		break;
	case PORT_B:
		//PORTB ^= (1<<A_u8pinNumber);
		TOG_BIT(PORTB,A_u8pinNumber);
    1bb2:	a8 e3       	ldi	r26, 0x38	; 56
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e8 e3       	ldi	r30, 0x38	; 56
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	40 81       	ld	r20, Z
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <MDIO_vTogglePinValue+0x90>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <MDIO_vTogglePinValue+0x8c>
    1bd2:	84 27       	eor	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	25 c0       	rjmp	.+74     	; 0x1c22 <MDIO_vTogglePinValue+0xe4>
		break;
	case PORT_C:
		//PORTC ^= (1<<A_u8pinNumber);
		TOG_BIT(PORTC,A_u8pinNumber);
    1bd8:	a5 e3       	ldi	r26, 0x35	; 53
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e3       	ldi	r30, 0x35	; 53
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	40 81       	ld	r20, Z
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <MDIO_vTogglePinValue+0xb6>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <MDIO_vTogglePinValue+0xb2>
    1bf8:	84 27       	eor	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	12 c0       	rjmp	.+36     	; 0x1c22 <MDIO_vTogglePinValue+0xe4>
		break;
	case PORT_D:
		//PORTD ^= (1<<A_u8pinNumber);
		TOG_BIT(PORTD,A_u8pinNumber);
    1bfe:	a2 e3       	ldi	r26, 0x32	; 50
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e2 e3       	ldi	r30, 0x32	; 50
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	40 81       	ld	r20, Z
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <MDIO_vTogglePinValue+0xdc>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <MDIO_vTogglePinValue+0xd8>
    1c1e:	84 27       	eor	r24, r20
    1c20:	8c 93       	st	X, r24
		break;
	}
}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <MDIO_U8GetPinValue>:

/* return high/low */
u8 MDIO_U8GetPinValue(u8 A_u8portNumber, u8 A_u8pinNumber)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <MDIO_U8GetPinValue+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <MDIO_U8GetPinValue+0x8>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value = 255;
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8portNumber){
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	4c 81       	ldd	r20, Y+4	; 0x04
    1c52:	5d 81       	ldd	r21, Y+5	; 0x05
    1c54:	41 30       	cpi	r20, 0x01	; 1
    1c56:	51 05       	cpc	r21, r1
    1c58:	41 f1       	breq	.+80     	; 0x1caa <MDIO_U8GetPinValue+0x7a>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	34 f4       	brge	.+12     	; 0x1c70 <MDIO_U8GetPinValue+0x40>
    1c64:	2c 81       	ldd	r18, Y+4	; 0x04
    1c66:	3d 81       	ldd	r19, Y+5	; 0x05
    1c68:	21 15       	cp	r18, r1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	61 f0       	breq	.+24     	; 0x1c86 <MDIO_U8GetPinValue+0x56>
    1c6e:	52 c0       	rjmp	.+164    	; 0x1d14 <MDIO_U8GetPinValue+0xe4>
    1c70:	4c 81       	ldd	r20, Y+4	; 0x04
    1c72:	5d 81       	ldd	r21, Y+5	; 0x05
    1c74:	42 30       	cpi	r20, 0x02	; 2
    1c76:	51 05       	cpc	r21, r1
    1c78:	51 f1       	breq	.+84     	; 0x1cce <MDIO_U8GetPinValue+0x9e>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	b9 f1       	breq	.+110    	; 0x1cf2 <MDIO_U8GetPinValue+0xc2>
    1c84:	47 c0       	rjmp	.+142    	; 0x1d14 <MDIO_U8GetPinValue+0xe4>
	case PORT_A: local_u8Value =  GET_BIT(PINA,A_u8pinNumber);
    1c86:	e9 e3       	ldi	r30, 0x39	; 57
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <MDIO_U8GetPinValue+0x6e>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <MDIO_U8GetPinValue+0x6a>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	35 c0       	rjmp	.+106    	; 0x1d14 <MDIO_U8GetPinValue+0xe4>
	//((PINA>>A_u8pinNumber)&1);
	break;
	case PORT_B: local_u8Value =  GET_BIT(PINB,A_u8pinNumber);
    1caa:	e6 e3       	ldi	r30, 0x36	; 54
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a9 01       	movw	r20, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <MDIO_U8GetPinValue+0x92>
    1cbe:	55 95       	asr	r21
    1cc0:	47 95       	ror	r20
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <MDIO_U8GetPinValue+0x8e>
    1cc6:	ca 01       	movw	r24, r20
    1cc8:	81 70       	andi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	23 c0       	rjmp	.+70     	; 0x1d14 <MDIO_U8GetPinValue+0xe4>
	//((PINB>>A_u8pinNumber)&1);
	break;
	case PORT_C: local_u8Value = GET_BIT(PINC,A_u8pinNumber);
    1cce:	e3 e3       	ldi	r30, 0x33	; 51
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <MDIO_U8GetPinValue+0xb6>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <MDIO_U8GetPinValue+0xb2>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	11 c0       	rjmp	.+34     	; 0x1d14 <MDIO_U8GetPinValue+0xe4>
	//((PINC>>A_u8pinNumber)&1); //
	break;
	case PORT_D: local_u8Value = GET_BIT(PIND,A_u8pinNumber);
    1cf2:	e0 e3       	ldi	r30, 0x30	; 48
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a9 01       	movw	r20, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <MDIO_U8GetPinValue+0xda>
    1d06:	55 95       	asr	r21
    1d08:	47 95       	ror	r20
    1d0a:	8a 95       	dec	r24
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <MDIO_U8GetPinValue+0xd6>
    1d0e:	ca 01       	movw	r24, r20
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
	//((PIND>>A_u8pinNumber)&1); //
	break;
	}
	return local_u8Value;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <MADC_vInit>:
/*
 * Init (voltage source - prescalar - auto trigger - Data direction)
 * read (Enable ADC - Start conversion - wait for flag - return reading)
 * */

void MADC_vInit(void){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	/* voltage source */
	SET_BIT(ADMUX, REFS0); // ADMUX = 6 //set
    1d2e:	a7 e2       	ldi	r26, 0x27	; 39
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e7 e2       	ldi	r30, 0x27	; 39
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 64       	ori	r24, 0x40	; 64
    1d3a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1); // ADMUX = 7 //clear
    1d3c:	a7 e2       	ldi	r26, 0x27	; 39
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e7 e2       	ldi	r30, 0x27	; 39
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 77       	andi	r24, 0x7F	; 127
    1d48:	8c 93       	st	X, r24
	/* Data direction : Right */
	CLR_BIT(ADMUX, ADLAR); // ADMUX = 5 //clear
    1d4a:	a7 e2       	ldi	r26, 0x27	; 39
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e7 e2       	ldi	r30, 0x27	; 39
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7d       	andi	r24, 0xDF	; 223
    1d56:	8c 93       	st	X, r24
	/* no auto trigger */
	CLR_BIT(ADCSRA, ADATE); // ADCSRA = 5 //clear
    1d58:	a6 e2       	ldi	r26, 0x26	; 38
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e6 e2       	ldi	r30, 0x26	; 38
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7d       	andi	r24, 0xDF	; 223
    1d64:	8c 93       	st	X, r24
	/* Prescalar ==> /8 */
	SET_BIT(ADCSRA, ADPS2); //ADCSRA = 2 //set
    1d66:	a6 e2       	ldi	r26, 0x26	; 38
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e6 e2       	ldi	r30, 0x26	; 38
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	84 60       	ori	r24, 0x04	; 4
    1d72:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1); //ADCSRA = 1 //set
    1d74:	a6 e2       	ldi	r26, 0x26	; 38
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e6 e2       	ldi	r30, 0x26	; 38
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	82 60       	ori	r24, 0x02	; 2
    1d80:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADPS0); //ADCSRA = 0 //clear
    1d82:	a6 e2       	ldi	r26, 0x26	; 38
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e6 e2       	ldi	r30, 0x26	; 38
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8e 7f       	andi	r24, 0xFE	; 254
    1d8e:	8c 93       	st	X, r24
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <MADC_u8GetDigitalValue>:
u16 MADC_u8GetDigitalValue(u8 A_u8Channel){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	89 83       	std	Y+1, r24	; 0x01
	A_u8Channel &= CHANNEL_MASK; /* channel 5 bits */
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	8f 71       	andi	r24, 0x1F	; 31
    1da6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADMUX_MASK; /* save last 3 bits, clear right 5 bits */
    1da8:	a7 e2       	ldi	r26, 0x27	; 39
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e7 e2       	ldi	r30, 0x27	; 39
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 7e       	andi	r24, 0xE0	; 224
    1db4:	8c 93       	st	X, r24
	ADMUX |= A_u8Channel;
    1db6:	a7 e2       	ldi	r26, 0x27	; 39
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e7 e2       	ldi	r30, 0x27	; 39
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	90 81       	ld	r25, Z
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	89 2b       	or	r24, r25
    1dc4:	8c 93       	st	X, r24
	/* ENABLE ADC */
	SET_BIT(ADCSRA, ADEN);
    1dc6:	a6 e2       	ldi	r26, 0x26	; 38
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e6 e2       	ldi	r30, 0x26	; 38
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 68       	ori	r24, 0x80	; 128
    1dd2:	8c 93       	st	X, r24
	/* Start conversion */
	SET_BIT(ADCSRA,ADSC);
    1dd4:	a6 e2       	ldi	r26, 0x26	; 38
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e6 e2       	ldi	r30, 0x26	; 38
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	8c 93       	st	X, r24
	/* pooling on flag */
	while (GET_BIT(ADCSRA,ADIF)==0);
    1de2:	e6 e2       	ldi	r30, 0x26	; 38
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	82 95       	swap	r24
    1dea:	8f 70       	andi	r24, 0x0F	; 15
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	90 70       	andi	r25, 0x00	; 0
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	a9 f3       	breq	.-22     	; 0x1de2 <MADC_u8GetDigitalValue+0x4c>
	SET_BIT(ADCSRA, ADIF);
    1df8:	a6 e2       	ldi	r26, 0x26	; 38
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e6 e2       	ldi	r30, 0x26	; 38
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 61       	ori	r24, 0x10	; 16
    1e04:	8c 93       	st	X, r24
	/* reading value */
	return ADC;
    1e06:	e4 e2       	ldi	r30, 0x24	; 36
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <HLM35_vInit>:
#include "../../LIB/STD_LIB.h"

#include "../../MCAL/ADC/ADC_Interface.h"
#include "LM35_Interface.h"

void HLM35_vInit(void){
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	MADC_vInit();
    1e1e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <MADC_vInit>
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <HLM35_vCallValue>:

u32 HLM35_vCallValue(void){
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2c 97       	sbiw	r28, 0x0c	; 12
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
	u32 digital = MADC_u8GetDigitalValue(0);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <MADC_u8GetDigitalValue>
    1e42:	cc 01       	movw	r24, r24
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	89 87       	std	Y+9, r24	; 0x09
    1e4a:	9a 87       	std	Y+10, r25	; 0x0a
    1e4c:	ab 87       	std	Y+11, r26	; 0x0b
    1e4e:	bc 87       	std	Y+12, r27	; 0x0c
	u32 analog = 5000*digital/1024;
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e56:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e58:	28 e8       	ldi	r18, 0x88	; 136
    1e5a:	33 e1       	ldi	r19, 0x13	; 19
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 00 1c 	call	0x3800	; 0x3800 <__mulsi3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	07 2e       	mov	r0, r23
    1e6e:	7a e0       	ldi	r23, 0x0A	; 10
    1e70:	b6 95       	lsr	r27
    1e72:	a7 95       	ror	r26
    1e74:	97 95       	ror	r25
    1e76:	87 95       	ror	r24
    1e78:	7a 95       	dec	r23
    1e7a:	d1 f7       	brne	.-12     	; 0x1e70 <HLM35_vCallValue+0x48>
    1e7c:	70 2d       	mov	r23, r0
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	af 83       	std	Y+7, r26	; 0x07
    1e84:	b8 87       	std	Y+8, r27	; 0x08
	u32 temp = analog/10;
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	af 81       	ldd	r26, Y+7	; 0x07
    1e8c:	b8 85       	ldd	r27, Y+8	; 0x08
    1e8e:	2a e0       	ldi	r18, 0x0A	; 10
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 1f 1c 	call	0x383e	; 0x383e <__udivmodsi4>
    1e9e:	da 01       	movw	r26, r20
    1ea0:	c9 01       	movw	r24, r18
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	ab 83       	std	Y+3, r26	; 0x03
    1ea8:	bc 83       	std	Y+4, r27	; 0x04
	return temp;
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	ab 81       	ldd	r26, Y+3	; 0x03
    1eb0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	2c 96       	adiw	r28, 0x0c	; 12
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <HLDR_vInit>:
#include "../../LIB/STD_LIB.h"

#include "../../MCAL/ADC/ADC_Interface.h"
#include "LDR_Interface.h"

void HLDR_vInit(void){
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	MADC_vInit();
    1ed0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <MADC_vInit>
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <HLDR_vCallValue>:
u16 HLDR_vCallValue(void){
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <HLDR_vCallValue+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	u16 digital = MADC_u8GetDigitalValue(1);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <MADC_u8GetDigitalValue>
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
	return digital;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <HLCD_vInit>:

#include "LCD_interface.h"


/* init - send command - send data */
void HLCD_vInit(void){
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	c6 54       	subi	r28, 0x46	; 70
    1f0a:	d0 40       	sbci	r29, 0x00	; 0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
	/* RS output */
	MDIO_vSetPinDirection(CONTROL_PORT,RS,OUTPUT);
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	64 e0       	ldi	r22, 0x04	; 4
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	/* RW output */
	MDIO_vSetPinDirection(CONTROL_PORT,RW,OUTPUT);
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	65 e0       	ldi	r22, 0x05	; 5
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	/* En output */
	MDIO_vSetPinDirection(CONTROL_PORT,EN,OUTPUT);
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	/* data port output */
	MDIO_vSetPortDirection(DATA_PORT,OUTPUT);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	0e 94 26 0c 	call	0x184c	; 0x184c <MDIO_vSetPortDirection>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 5b       	subi	r30, 0xBD	; 189
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a8 e4       	ldi	r26, 0x48	; 72
    1f48:	b2 e4       	ldi	r27, 0x42	; 66
    1f4a:	80 83       	st	Z, r24
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	a2 83       	std	Z+2, r26	; 0x02
    1f50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	8e 01       	movw	r16, r28
    1f54:	01 5c       	subi	r16, 0xC1	; 193
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ed 5b       	subi	r30, 0xBD	; 189
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	a2 83       	std	Z+2, r26	; 0x02
    1f7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f80:	fe 01       	movw	r30, r28
    1f82:	ff 96       	adiw	r30, 0x3f	; 63
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <HLCD_vInit+0xaa>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e af       	std	Y+62, r25	; 0x3e
    1fa2:	8d af       	std	Y+61, r24	; 0x3d
    1fa4:	46 c0       	rjmp	.+140    	; 0x2032 <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ff 96       	adiw	r30, 0x3f	; 63
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	64 f5       	brge	.+88     	; 0x201a <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 5b       	subi	r30, 0xBD	; 189
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e af       	std	Y+62, r25	; 0x3e
    1fee:	8d af       	std	Y+61, r24	; 0x3d
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <HLCD_vInit+0x114>
    1ff2:	88 ec       	ldi	r24, 0xC8	; 200
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c af       	std	Y+60, r25	; 0x3c
    1ff8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ffa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ffc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <HLCD_vInit+0x102>
    2002:	9c af       	std	Y+60, r25	; 0x3c
    2004:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d ad       	ldd	r24, Y+61	; 0x3d
    2008:	9e ad       	ldd	r25, Y+62	; 0x3e
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e af       	std	Y+62, r25	; 0x3e
    200e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d ad       	ldd	r24, Y+61	; 0x3d
    2012:	9e ad       	ldd	r25, Y+62	; 0x3e
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <HLCD_vInit+0xf6>
    2018:	16 c0       	rjmp	.+44     	; 0x2046 <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	fe 01       	movw	r30, r28
    201c:	ff 96       	adiw	r30, 0x3f	; 63
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e af       	std	Y+62, r25	; 0x3e
    2030:	8d af       	std	Y+61, r24	; 0x3d
    2032:	8d ad       	ldd	r24, Y+61	; 0x3d
    2034:	9e ad       	ldd	r25, Y+62	; 0x3e
    2036:	9a af       	std	Y+58, r25	; 0x3a
    2038:	89 af       	std	Y+57, r24	; 0x39
    203a:	89 ad       	ldd	r24, Y+57	; 0x39
    203c:	9a ad       	ldd	r25, Y+58	; 0x3a
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <HLCD_vInit+0x142>
    2042:	9a af       	std	Y+58, r25	; 0x3a
    2044:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	/* Function set */
	HLCD_vSendCommand(FUNCTION_SET);
    2046:	88 e3       	ldi	r24, 0x38	; 56
    2048:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e8       	ldi	r26, 0x80	; 128
    2052:	bf e3       	ldi	r27, 0x3F	; 63
    2054:	8d ab       	std	Y+53, r24	; 0x35
    2056:	9e ab       	std	Y+54, r25	; 0x36
    2058:	af ab       	std	Y+55, r26	; 0x37
    205a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205c:	6d a9       	ldd	r22, Y+53	; 0x35
    205e:	7e a9       	ldd	r23, Y+54	; 0x36
    2060:	8f a9       	ldd	r24, Y+55	; 0x37
    2062:	98 ad       	ldd	r25, Y+56	; 0x38
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a ef       	ldi	r20, 0xFA	; 250
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	89 ab       	std	Y+49, r24	; 0x31
    2076:	9a ab       	std	Y+50, r25	; 0x32
    2078:	ab ab       	std	Y+51, r26	; 0x33
    207a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    207c:	69 a9       	ldd	r22, Y+49	; 0x31
    207e:	7a a9       	ldd	r23, Y+50	; 0x32
    2080:	8b a9       	ldd	r24, Y+51	; 0x33
    2082:	9c a9       	ldd	r25, Y+52	; 0x34
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e8       	ldi	r20, 0x80	; 128
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2090:	88 23       	and	r24, r24
    2092:	2c f4       	brge	.+10     	; 0x209e <HLCD_vInit+0x1a2>
		__ticks = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	98 ab       	std	Y+48, r25	; 0x30
    209a:	8f a7       	std	Y+47, r24	; 0x2f
    209c:	3f c0       	rjmp	.+126    	; 0x211c <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    209e:	69 a9       	ldd	r22, Y+49	; 0x31
    20a0:	7a a9       	ldd	r23, Y+50	; 0x32
    20a2:	8b a9       	ldd	r24, Y+51	; 0x33
    20a4:	9c a9       	ldd	r25, Y+52	; 0x34
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	3f ef       	ldi	r19, 0xFF	; 255
    20aa:	4f e7       	ldi	r20, 0x7F	; 127
    20ac:	57 e4       	ldi	r21, 0x47	; 71
    20ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b2:	18 16       	cp	r1, r24
    20b4:	4c f5       	brge	.+82     	; 0x2108 <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b6:	6d a9       	ldd	r22, Y+53	; 0x35
    20b8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ba:	8f a9       	ldd	r24, Y+55	; 0x37
    20bc:	98 ad       	ldd	r25, Y+56	; 0x38
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	51 e4       	ldi	r21, 0x41	; 65
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <HLCD_vInit+0x202>
    20e0:	88 ec       	ldi	r24, 0xC8	; 200
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9e a7       	std	Y+46, r25	; 0x2e
    20e6:	8d a7       	std	Y+45, r24	; 0x2d
    20e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <HLCD_vInit+0x1f0>
    20f0:	9e a7       	std	Y+46, r25	; 0x2e
    20f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f6:	98 a9       	ldd	r25, Y+48	; 0x30
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	98 ab       	std	Y+48, r25	; 0x30
    20fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2100:	98 a9       	ldd	r25, Y+48	; 0x30
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	69 f7       	brne	.-38     	; 0x20e0 <HLCD_vInit+0x1e4>
    2106:	14 c0       	rjmp	.+40     	; 0x2130 <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2108:	69 a9       	ldd	r22, Y+49	; 0x31
    210a:	7a a9       	ldd	r23, Y+50	; 0x32
    210c:	8b a9       	ldd	r24, Y+51	; 0x33
    210e:	9c a9       	ldd	r25, Y+52	; 0x34
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	98 ab       	std	Y+48, r25	; 0x30
    211a:	8f a7       	std	Y+47, r24	; 0x2f
    211c:	8f a5       	ldd	r24, Y+47	; 0x2f
    211e:	98 a9       	ldd	r25, Y+48	; 0x30
    2120:	9c a7       	std	Y+44, r25	; 0x2c
    2122:	8b a7       	std	Y+43, r24	; 0x2b
    2124:	8b a5       	ldd	r24, Y+43	; 0x2b
    2126:	9c a5       	ldd	r25, Y+44	; 0x2c
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <HLCD_vInit+0x22c>
    212c:	9c a7       	std	Y+44, r25	; 0x2c
    212e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* DISPLAY_ON */
	HLCD_vSendCommand(DISPLAY_ON);
    2130:	8f e0       	ldi	r24, 0x0F	; 15
    2132:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e8       	ldi	r26, 0x80	; 128
    213c:	bf e3       	ldi	r27, 0x3F	; 63
    213e:	8f a3       	std	Y+39, r24	; 0x27
    2140:	98 a7       	std	Y+40, r25	; 0x28
    2142:	a9 a7       	std	Y+41, r26	; 0x29
    2144:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6f a1       	ldd	r22, Y+39	; 0x27
    2148:	78 a5       	ldd	r23, Y+40	; 0x28
    214a:	89 a5       	ldd	r24, Y+41	; 0x29
    214c:	9a a5       	ldd	r25, Y+42	; 0x2a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8b a3       	std	Y+35, r24	; 0x23
    2160:	9c a3       	std	Y+36, r25	; 0x24
    2162:	ad a3       	std	Y+37, r26	; 0x25
    2164:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2166:	6b a1       	ldd	r22, Y+35	; 0x23
    2168:	7c a1       	ldd	r23, Y+36	; 0x24
    216a:	8d a1       	ldd	r24, Y+37	; 0x25
    216c:	9e a1       	ldd	r25, Y+38	; 0x26
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <HLCD_vInit+0x28c>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    2188:	6b a1       	ldd	r22, Y+35	; 0x23
    218a:	7c a1       	ldd	r23, Y+36	; 0x24
    218c:	8d a1       	ldd	r24, Y+37	; 0x25
    218e:	9e a1       	ldd	r25, Y+38	; 0x26
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6f a1       	ldd	r22, Y+39	; 0x27
    21a2:	78 a5       	ldd	r23, Y+40	; 0x28
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <HLCD_vInit+0x2ec>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 a3       	std	Y+32, r25	; 0x20
    21d0:	8f 8f       	std	Y+31, r24	; 0x1f
    21d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <HLCD_vInit+0x2da>
    21da:	98 a3       	std	Y+32, r25	; 0x20
    21dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	89 a1       	ldd	r24, Y+33	; 0x21
    21e0:	9a a1       	ldd	r25, Y+34	; 0x22
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9a a3       	std	Y+34, r25	; 0x22
    21e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <HLCD_vInit+0x2ce>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9a a3       	std	Y+34, r25	; 0x22
    2204:	89 a3       	std	Y+33, r24	; 0x21
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	9e 8f       	std	Y+30, r25	; 0x1e
    220c:	8d 8f       	std	Y+29, r24	; 0x1d
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <HLCD_vInit+0x316>
    2216:	9e 8f       	std	Y+30, r25	; 0x1e
    2218:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* DISPLAY_CLEAR */
	HLCD_vSendCommand(DISPLAY_CLEAR);
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e4       	ldi	r26, 0x40	; 64
    2226:	b0 e4       	ldi	r27, 0x40	; 64
    2228:	89 8f       	std	Y+25, r24	; 0x19
    222a:	9a 8f       	std	Y+26, r25	; 0x1a
    222c:	ab 8f       	std	Y+27, r26	; 0x1b
    222e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	69 8d       	ldd	r22, Y+25	; 0x19
    2232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a ef       	ldi	r20, 0xFA	; 250
    223e:	54 e4       	ldi	r21, 0x44	; 68
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8d 8b       	std	Y+21, r24	; 0x15
    224a:	9e 8b       	std	Y+22, r25	; 0x16
    224c:	af 8b       	std	Y+23, r26	; 0x17
    224e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <HLCD_vInit+0x376>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	69 8d       	ldd	r22, Y+25	; 0x19
    228c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <HLCD_vInit+0x3d6>
    22b4:	88 ec       	ldi	r24, 0xC8	; 200
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
    22bc:	89 89       	ldd	r24, Y+17	; 0x11
    22be:	9a 89       	ldd	r25, Y+18	; 0x12
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <HLCD_vInit+0x3c4>
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <HLCD_vInit+0x3b8>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <HLCD_vInit+0x400>
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	/* ENTRY_MODE_SET */
	HLCD_vSendCommand(ENTRY_MODE_SET);
    2304:	86 e0       	ldi	r24, 0x06	; 6
    2306:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e8       	ldi	r26, 0x80	; 128
    2310:	bf e3       	ldi	r27, 0x3F	; 63
    2312:	8b 87       	std	Y+11, r24	; 0x0b
    2314:	9c 87       	std	Y+12, r25	; 0x0c
    2316:	ad 87       	std	Y+13, r26	; 0x0d
    2318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6b 85       	ldd	r22, Y+11	; 0x0b
    231c:	7c 85       	ldd	r23, Y+12	; 0x0c
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8f 83       	std	Y+7, r24	; 0x07
    2334:	98 87       	std	Y+8, r25	; 0x08
    2336:	a9 87       	std	Y+9, r26	; 0x09
    2338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <HLCD_vInit+0x460>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	3f c0       	rjmp	.+126    	; 0x23da <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <HLCD_vInit+0x4c0>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <HLCD_vInit+0x4ae>
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <HLCD_vInit+0x4a2>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <HLCD_vInit+0x4ea>
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23ee:	ca 5b       	subi	r28, 0xBA	; 186
    23f0:	df 4f       	sbci	r29, 0xFF	; 255
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <HLCD_vSendCommand>:
void HLCD_vSendCommand(u8 A_u8Command){
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	6d 97       	sbiw	r28, 0x1d	; 29
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 0 (Command mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RS,LOW);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	64 e0       	ldi	r22, 0x04	; 4
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	/* RW = 0 (Write mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RW,LOW);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	65 e0       	ldi	r22, 0x05	; 5
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	/* send command through the port */
	MDIO_vSetPortValue(DATA_PORT,A_u8Command);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2434:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <MDIO_vSetPortValue>
	/* Enable sequence */
	MDIO_vSetPinValue(CONTROL_PORT,EN,HIGH);
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	66 e0       	ldi	r22, 0x06	; 6
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e8       	ldi	r26, 0x80	; 128
    2448:	bf e3       	ldi	r27, 0x3F	; 63
    244a:	89 8f       	std	Y+25, r24	; 0x19
    244c:	9a 8f       	std	Y+26, r25	; 0x1a
    244e:	ab 8f       	std	Y+27, r26	; 0x1b
    2450:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	69 8d       	ldd	r22, Y+25	; 0x19
    2454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a ef       	ldi	r20, 0xFA	; 250
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8d 8b       	std	Y+21, r24	; 0x15
    246c:	9e 8b       	std	Y+22, r25	; 0x16
    246e:	af 8b       	std	Y+23, r26	; 0x17
    2470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    2494:	6d 89       	ldd	r22, Y+21	; 0x15
    2496:	7e 89       	ldd	r23, Y+22	; 0x16
    2498:	8f 89       	ldd	r24, Y+23	; 0x17
    249a:	98 8d       	ldd	r25, Y+24	; 0x18
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	69 8d       	ldd	r22, Y+25	; 0x19
    24ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <HLCD_vSendCommand+0xee>
    24d6:	88 ec       	ldi	r24, 0xC8	; 200
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	9a 89       	ldd	r25, Y+18	; 0x12
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <HLCD_vSendCommand+0xdc>
    24e6:	9a 8b       	std	Y+18, r25	; 0x12
    24e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <HLCD_vSendCommand+0xd0>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2500:	7e 89       	ldd	r23, Y+22	; 0x16
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	8b 89       	ldd	r24, Y+19	; 0x13
    2514:	9c 89       	ldd	r25, Y+20	; 0x14
    2516:	98 8b       	std	Y+16, r25	; 0x10
    2518:	8f 87       	std	Y+15, r24	; 0x0f
    251a:	8f 85       	ldd	r24, Y+15	; 0x0f
    251c:	98 89       	ldd	r25, Y+16	; 0x10
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <HLCD_vSendCommand+0x118>
    2522:	98 8b       	std	Y+16, r25	; 0x10
    2524:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	66 e0       	ldi	r22, 0x06	; 6
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 e8       	ldi	r26, 0x80	; 128
    2536:	bf e3       	ldi	r27, 0x3F	; 63
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	ad 87       	std	Y+13, r26	; 0x0d
    253e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	a9 87       	std	Y+9, r26	; 0x09
    255e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <HLCD_vSendCommand+0x1dc>
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <HLCD_vSendCommand+0x1ca>
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <HLCD_vSendCommand+0x1be>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <HLCD_vSendCommand+0x206>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2614:	6d 96       	adiw	r28, 0x1d	; 29
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <HLCD_vSendData>:
void HLCD_vSendData(u8 A_u8Data){
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	6d 97       	sbiw	r28, 0x1d	; 29
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 1 (Data mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RS,HIGH);
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	64 e0       	ldi	r22, 0x04	; 4
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	/* RW = 0 (Write mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RW,LOW);
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	65 e0       	ldi	r22, 0x05	; 5
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	/* send command through the port */
	MDIO_vSetPortValue(DATA_PORT,A_u8Data);
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2654:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <MDIO_vSetPortValue>
	/* Enable sequence */
	MDIO_vSetPinValue(CONTROL_PORT,EN,HIGH);
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	66 e0       	ldi	r22, 0x06	; 6
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e8       	ldi	r26, 0x80	; 128
    2668:	bf e3       	ldi	r27, 0x3F	; 63
    266a:	89 8f       	std	Y+25, r24	; 0x19
    266c:	9a 8f       	std	Y+26, r25	; 0x1a
    266e:	ab 8f       	std	Y+27, r26	; 0x1b
    2670:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	69 8d       	ldd	r22, Y+25	; 0x19
    2674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a ef       	ldi	r20, 0xFA	; 250
    2680:	54 e4       	ldi	r21, 0x44	; 68
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8d 8b       	std	Y+21, r24	; 0x15
    268c:	9e 8b       	std	Y+22, r25	; 0x16
    268e:	af 8b       	std	Y+23, r26	; 0x17
    2690:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e8       	ldi	r20, 0x80	; 128
    26a0:	5f e3       	ldi	r21, 0x3F	; 63
    26a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a6:	88 23       	and	r24, r24
    26a8:	2c f4       	brge	.+10     	; 0x26b4 <HLCD_vSendData+0x8e>
		__ticks = 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <HLCD_vSendData+0x10c>
	else if (__tmp > 65535)
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	4c f5       	brge	.+82     	; 0x271e <HLCD_vSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	69 8d       	ldd	r22, Y+25	; 0x19
    26ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	0f c0       	rjmp	.+30     	; 0x2714 <HLCD_vSendData+0xee>
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9a 8b       	std	Y+18, r25	; 0x12
    26fc:	89 8b       	std	Y+17, r24	; 0x11
    26fe:	89 89       	ldd	r24, Y+17	; 0x11
    2700:	9a 89       	ldd	r25, Y+18	; 0x12
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <HLCD_vSendData+0xdc>
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	69 f7       	brne	.-38     	; 0x26f6 <HLCD_vSendData+0xd0>
    271c:	14 c0       	rjmp	.+40     	; 0x2746 <HLCD_vSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	6d 89       	ldd	r22, Y+21	; 0x15
    2720:	7e 89       	ldd	r23, Y+22	; 0x16
    2722:	8f 89       	ldd	r24, Y+23	; 0x17
    2724:	98 8d       	ldd	r25, Y+24	; 0x18
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	8b 89       	ldd	r24, Y+19	; 0x13
    2734:	9c 89       	ldd	r25, Y+20	; 0x14
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f
    273a:	8f 85       	ldd	r24, Y+15	; 0x0f
    273c:	98 89       	ldd	r25, Y+16	; 0x10
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <HLCD_vSendData+0x118>
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	66 e0       	ldi	r22, 0x06	; 6
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	8b 87       	std	Y+11, r24	; 0x0b
    275a:	9c 87       	std	Y+12, r25	; 0x0c
    275c:	ad 87       	std	Y+13, r26	; 0x0d
    275e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8f 83       	std	Y+7, r24	; 0x07
    277a:	98 87       	std	Y+8, r25	; 0x08
    277c:	a9 87       	std	Y+9, r26	; 0x09
    277e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <HLCD_vSendData+0x17c>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <HLCD_vSendData+0x1fa>
	else if (__tmp > 65535)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <HLCD_vSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <HLCD_vSendData+0x1dc>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <HLCD_vSendData+0x1ca>
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <HLCD_vSendData+0x1be>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <HLCD_vSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <HLCD_vSendData+0x206>
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2834:	6d 96       	adiw	r28, 0x1d	; 29
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <HLCD_vSendString>:
void HLCD_vSendString(u8 * A_ptrToString){
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <HLCD_vSendString+0x6>
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	0a c0       	rjmp	.+20     	; 0x286a <HLCD_vSendString+0x24>

	while (*A_ptrToString!='\0'){
		HLCD_vSendData(*A_ptrToString);
    2856:	e9 81       	ldd	r30, Y+1	; 0x01
    2858:	fa 81       	ldd	r31, Y+2	; 0x02
    285a:	80 81       	ld	r24, Z
    285c:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
		A_ptrToString++;
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
	_delay_ms(1);
}
void HLCD_vSendString(u8 * A_ptrToString){

	while (*A_ptrToString!='\0'){
    286a:	e9 81       	ldd	r30, Y+1	; 0x01
    286c:	fa 81       	ldd	r31, Y+2	; 0x02
    286e:	80 81       	ld	r24, Z
    2870:	88 23       	and	r24, r24
    2872:	89 f7       	brne	.-30     	; 0x2856 <HLCD_vSendString+0x10>
		HLCD_vSendData(*A_ptrToString);
		A_ptrToString++;
	}
}
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <HLCD_vMoveTo>:
/* 0-1 (0 - 15) */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col){
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	00 d0       	rcall	.+0      	; 0x2884 <HLCD_vMoveTo+0x6>
    2884:	00 d0       	rcall	.+0      	; 0x2886 <HLCD_vMoveTo+0x8>
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Row){
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	3c 83       	std	Y+4, r19	; 0x04
    2896:	2b 83       	std	Y+3, r18	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	31 f0       	breq	.+12     	; 0x28ac <HLCD_vMoveTo+0x2e>
    28a0:	2b 81       	ldd	r18, Y+3	; 0x03
    28a2:	3c 81       	ldd	r19, Y+4	; 0x04
    28a4:	21 30       	cpi	r18, 0x01	; 1
    28a6:	31 05       	cpc	r19, r1
    28a8:	31 f0       	breq	.+12     	; 0x28b6 <HLCD_vMoveTo+0x38>
    28aa:	09 c0       	rjmp	.+18     	; 0x28be <HLCD_vMoveTo+0x40>
	case 0:
		HLCD_vSendCommand(128 + A_u8Col);break;
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	80 58       	subi	r24, 0x80	; 128
    28b0:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <HLCD_vMoveTo+0x40>
	case 1:
		HLCD_vSendCommand(192 + A_u8Col);break;
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	80 54       	subi	r24, 0x40	; 64
    28ba:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
	}
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <HLCD_vDisplayClear>:
void HLCD_vDisplayClear(void){
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendCommand(DISPLAY_CLEAR);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <HLCD_s32ReverseNumber>:
s32 static HLCD_s32ReverseNumber(s32 A_s32Number){
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	2c 97       	sbiw	r28, 0x0c	; 12
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	69 87       	std	Y+9, r22	; 0x09
    28f6:	7a 87       	std	Y+10, r23	; 0x0a
    28f8:	8b 87       	std	Y+11, r24	; 0x0b
    28fa:	9c 87       	std	Y+12, r25	; 0x0c
	s32 local_s32Rev = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e0       	ldi	r26, 0x00	; 0
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	8d 83       	std	Y+5, r24	; 0x05
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	af 83       	std	Y+7, r26	; 0x07
    290a:	b8 87       	std	Y+8, r27	; 0x08
    290c:	3e c0       	rjmp	.+124    	; 0x298a <HLCD_s32ReverseNumber+0xaa>
	while (A_s32Number != 0){
		s32 local_s32Digit = A_s32Number%10;
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	ab 85       	ldd	r26, Y+11	; 0x0b
    2914:	bc 85       	ldd	r27, Y+12	; 0x0c
    2916:	2a e0       	ldi	r18, 0x0A	; 10
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 41 1c 	call	0x3882	; 0x3882 <__divmodsi4>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	ab 83       	std	Y+3, r26	; 0x03
    2930:	bc 83       	std	Y+4, r27	; 0x04
		local_s32Rev = local_s32Rev*10 + local_s32Digit;
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	af 81       	ldd	r26, Y+7	; 0x07
    2938:	b8 85       	ldd	r27, Y+8	; 0x08
    293a:	2a e0       	ldi	r18, 0x0A	; 10
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 00 1c 	call	0x3800	; 0x3800 <__mulsi3>
    294a:	9b 01       	movw	r18, r22
    294c:	ac 01       	movw	r20, r24
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	ab 81       	ldd	r26, Y+3	; 0x03
    2954:	bc 81       	ldd	r27, Y+4	; 0x04
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	a4 1f       	adc	r26, r20
    295c:	b5 1f       	adc	r27, r21
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	af 83       	std	Y+7, r26	; 0x07
    2964:	b8 87       	std	Y+8, r27	; 0x08
		A_s32Number /= 10;
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	ab 85       	ldd	r26, Y+11	; 0x0b
    296c:	bc 85       	ldd	r27, Y+12	; 0x0c
    296e:	2a e0       	ldi	r18, 0x0A	; 10
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 41 1c 	call	0x3882	; 0x3882 <__divmodsi4>
    297e:	da 01       	movw	r26, r20
    2980:	c9 01       	movw	r24, r18
    2982:	89 87       	std	Y+9, r24	; 0x09
    2984:	9a 87       	std	Y+10, r25	; 0x0a
    2986:	ab 87       	std	Y+11, r26	; 0x0b
    2988:	bc 87       	std	Y+12, r27	; 0x0c
void HLCD_vDisplayClear(void){
	HLCD_vSendCommand(DISPLAY_CLEAR);
}
s32 static HLCD_s32ReverseNumber(s32 A_s32Number){
	s32 local_s32Rev = 1;
	while (A_s32Number != 0){
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2990:	bc 85       	ldd	r27, Y+12	; 0x0c
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	a1 05       	cpc	r26, r1
    2996:	b1 05       	cpc	r27, r1
    2998:	09 f0       	breq	.+2      	; 0x299c <HLCD_s32ReverseNumber+0xbc>
    299a:	b9 cf       	rjmp	.-142    	; 0x290e <HLCD_s32ReverseNumber+0x2e>
		s32 local_s32Digit = A_s32Number%10;
		local_s32Rev = local_s32Rev*10 + local_s32Digit;
		A_s32Number /= 10;
	}
	return local_s32Rev;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	af 81       	ldd	r26, Y+7	; 0x07
    29a2:	b8 85       	ldd	r27, Y+8	; 0x08
}
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	2c 96       	adiw	r28, 0x0c	; 12
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <HLCD_vSendNumber>:
void HLCD_vSendNumber(s32 A_s32Number){
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	28 97       	sbiw	r28, 0x08	; 8
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	6d 83       	std	Y+5, r22	; 0x05
    29d0:	7e 83       	std	Y+6, r23	; 0x06
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	98 87       	std	Y+8, r25	; 0x08
	if (A_s32Number < 0){
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	af 81       	ldd	r26, Y+7	; 0x07
    29dc:	b8 85       	ldd	r27, Y+8	; 0x08
    29de:	bb 23       	and	r27, r27
    29e0:	94 f4       	brge	.+36     	; 0x2a06 <HLCD_vSendNumber+0x4c>
		HLCD_vSendData('-');
    29e2:	8d e2       	ldi	r24, 0x2D	; 45
    29e4:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
		A_s32Number *= -1;
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	af 81       	ldd	r26, Y+7	; 0x07
    29ee:	b8 85       	ldd	r27, Y+8	; 0x08
    29f0:	b0 95       	com	r27
    29f2:	a0 95       	com	r26
    29f4:	90 95       	com	r25
    29f6:	81 95       	neg	r24
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	af 4f       	sbci	r26, 0xFF	; 255
    29fc:	bf 4f       	sbci	r27, 0xFF	; 255
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	af 83       	std	Y+7, r26	; 0x07
    2a04:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (A_s32Number == 0){
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	af 81       	ldd	r26, Y+7	; 0x07
    2a0c:	b8 85       	ldd	r27, Y+8	; 0x08
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	a1 05       	cpc	r26, r1
    2a12:	b1 05       	cpc	r27, r1
    2a14:	21 f4       	brne	.+8      	; 0x2a1e <HLCD_vSendNumber+0x64>
		HLCD_vSendData('0');
    2a16:	80 e3       	ldi	r24, 0x30	; 48
    2a18:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
    2a1c:	3b c0       	rjmp	.+118    	; 0x2a94 <HLCD_vSendNumber+0xda>
		return;
	}
	// reverse number
	s32 cur = HLCD_s32ReverseNumber(A_s32Number);
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	af 81       	ldd	r26, Y+7	; 0x07
    2a24:	b8 85       	ldd	r27, Y+8	; 0x08
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 70 14 	call	0x28e0	; 0x28e0 <HLCD_s32ReverseNumber>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	ab 83       	std	Y+3, r26	; 0x03
    2a38:	bc 83       	std	Y+4, r27	; 0x04
    2a3a:	23 c0       	rjmp	.+70     	; 0x2a82 <HLCD_vSendNumber+0xc8>
	// apply alogrithm
	while (cur != 1){
		HLCD_vSendData(cur%10 + '0'); //===> HLCD_vSendData('1') '1' ===> 1 + '0'
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	ab 81       	ldd	r26, Y+3	; 0x03
    2a42:	bc 81       	ldd	r27, Y+4	; 0x04
    2a44:	2a e0       	ldi	r18, 0x0A	; 10
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 41 1c 	call	0x3882	; 0x3882 <__divmodsi4>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	80 5d       	subi	r24, 0xD0	; 208
    2a5a:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
		cur /= 10;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	ab 81       	ldd	r26, Y+3	; 0x03
    2a64:	bc 81       	ldd	r27, Y+4	; 0x04
    2a66:	2a e0       	ldi	r18, 0x0A	; 10
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 41 1c 	call	0x3882	; 0x3882 <__divmodsi4>
    2a76:	da 01       	movw	r26, r20
    2a78:	c9 01       	movw	r24, r18
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	ab 83       	std	Y+3, r26	; 0x03
    2a80:	bc 83       	std	Y+4, r27	; 0x04
		return;
	}
	// reverse number
	s32 cur = HLCD_s32ReverseNumber(A_s32Number);
	// apply alogrithm
	while (cur != 1){
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	ab 81       	ldd	r26, Y+3	; 0x03
    2a88:	bc 81       	ldd	r27, Y+4	; 0x04
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	a1 05       	cpc	r26, r1
    2a90:	b1 05       	cpc	r27, r1
    2a92:	a1 f6       	brne	.-88     	; 0x2a3c <HLCD_vSendNumber+0x82>
		HLCD_vSendData(cur%10 + '0'); //===> HLCD_vSendData('1') '1' ===> 1 + '0'
		cur /= 10;
	}
}
    2a94:	28 96       	adiw	r28, 0x08	; 8
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <HLCD_vSetCursorPosition>:
void HLCD_vSetCursorPosition(s32 A_s32RowNumber,s32 A_s32ColumnNumber){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	28 97       	sbiw	r28, 0x08	; 8
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	69 83       	std	Y+1, r22	; 0x01
    2abc:	7a 83       	std	Y+2, r23	; 0x02
    2abe:	8b 83       	std	Y+3, r24	; 0x03
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	2d 83       	std	Y+5, r18	; 0x05
    2ac4:	3e 83       	std	Y+6, r19	; 0x06
    2ac6:	4f 83       	std	Y+7, r20	; 0x07
    2ac8:	58 87       	std	Y+8, r21	; 0x08
	A_s32ColumnNumber--;
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	af 81       	ldd	r26, Y+7	; 0x07
    2ad0:	b8 85       	ldd	r27, Y+8	; 0x08
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	a1 09       	sbc	r26, r1
    2ad6:	b1 09       	sbc	r27, r1
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	af 83       	std	Y+7, r26	; 0x07
    2ade:	b8 87       	std	Y+8, r27	; 0x08
	if(A_s32RowNumber == 1){
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ae6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	91 05       	cpc	r25, r1
    2aec:	a1 05       	cpc	r26, r1
    2aee:	b1 05       	cpc	r27, r1
    2af0:	29 f4       	brne	.+10     	; 0x2afc <HLCD_vSetCursorPosition+0x56>
		HLCD_vSendCommand(ROW1_Address + A_s32ColumnNumber);
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	80 58       	subi	r24, 0x80	; 128
    2af6:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
    2afa:	0d c0       	rjmp	.+26     	; 0x2b16 <HLCD_vSetCursorPosition+0x70>
	}else if(A_s32RowNumber == 2){
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	ab 81       	ldd	r26, Y+3	; 0x03
    2b02:	bc 81       	ldd	r27, Y+4	; 0x04
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	91 05       	cpc	r25, r1
    2b08:	a1 05       	cpc	r26, r1
    2b0a:	b1 05       	cpc	r27, r1
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <HLCD_vSetCursorPosition+0x70>
		HLCD_vSendCommand(ROW2_Address + A_s32ColumnNumber);
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	80 54       	subi	r24, 0x40	; 64
    2b12:	0e 94 03 12 	call	0x2406	; 0x2406 <HLCD_vSendCommand>
	}
}
    2b16:	28 96       	adiw	r28, 0x08	; 8
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <HLCD_vSendData_pos>:

void HLCD_vSendData_pos(u8 A_u8Data ,s32 A_s32RowNumber,s32 A_s32ColumnNumber){
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	29 97       	sbiw	r28, 0x09	; 9
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	4a 83       	std	Y+2, r20	; 0x02
    2b44:	5b 83       	std	Y+3, r21	; 0x03
    2b46:	6c 83       	std	Y+4, r22	; 0x04
    2b48:	7d 83       	std	Y+5, r23	; 0x05
    2b4a:	0e 83       	std	Y+6, r16	; 0x06
    2b4c:	1f 83       	std	Y+7, r17	; 0x07
    2b4e:	28 87       	std	Y+8, r18	; 0x08
    2b50:	39 87       	std	Y+9, r19	; 0x09
	HLCD_vSetCursorPosition(A_s32RowNumber, A_s32ColumnNumber);
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	ac 81       	ldd	r26, Y+4	; 0x04
    2b58:	bd 81       	ldd	r27, Y+5	; 0x05
    2b5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b5e:	48 85       	ldd	r20, Y+8	; 0x08
    2b60:	59 85       	ldd	r21, Y+9	; 0x09
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <HLCD_vSetCursorPosition>
	HLCD_vSendData(A_u8Data);
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
}
    2b70:	29 96       	adiw	r28, 0x09	; 9
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <HLCD_vSendString_pos>:

void HLCD_vSendString_pos(s8 *A_s8String ,s32 A_s32RowNumber,s32 A_s32ColumnNumber){
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	2a 97       	sbiw	r28, 0x0a	; 10
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	4b 83       	std	Y+3, r20	; 0x03
    2ba4:	5c 83       	std	Y+4, r21	; 0x04
    2ba6:	6d 83       	std	Y+5, r22	; 0x05
    2ba8:	7e 83       	std	Y+6, r23	; 0x06
    2baa:	0f 83       	std	Y+7, r16	; 0x07
    2bac:	18 87       	std	Y+8, r17	; 0x08
    2bae:	29 87       	std	Y+9, r18	; 0x09
    2bb0:	3a 87       	std	Y+10, r19	; 0x0a
	HLCD_vSetCursorPosition(A_s32RowNumber, A_s32ColumnNumber);
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb6:	ad 81       	ldd	r26, Y+5	; 0x05
    2bb8:	be 81       	ldd	r27, Y+6	; 0x06
    2bba:	2f 81       	ldd	r18, Y+7	; 0x07
    2bbc:	38 85       	ldd	r19, Y+8	; 0x08
    2bbe:	49 85       	ldd	r20, Y+9	; 0x09
    2bc0:	5a 85       	ldd	r21, Y+10	; 0x0a
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <HLCD_vSetCursorPosition>
	HLCD_vSendString(A_s8String);
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
}
    2bd2:	2a 96       	adiw	r28, 0x0a	; 10
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <HLCD_vSendNumber_pos>:

void HLCD_vSendNumber_pos(s32 A_s32Number ,s32 A_s32RowNumber,s32 A_s32ColumnNumber){
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	2c 97       	sbiw	r28, 0x0c	; 12
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	69 83       	std	Y+1, r22	; 0x01
    2c06:	7a 83       	std	Y+2, r23	; 0x02
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	2d 83       	std	Y+5, r18	; 0x05
    2c0e:	3e 83       	std	Y+6, r19	; 0x06
    2c10:	4f 83       	std	Y+7, r20	; 0x07
    2c12:	58 87       	std	Y+8, r21	; 0x08
    2c14:	e9 86       	std	Y+9, r14	; 0x09
    2c16:	fa 86       	std	Y+10, r15	; 0x0a
    2c18:	0b 87       	std	Y+11, r16	; 0x0b
    2c1a:	1c 87       	std	Y+12, r17	; 0x0c
	HLCD_vSetCursorPosition(A_s32RowNumber, A_s32ColumnNumber);
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	af 81       	ldd	r26, Y+7	; 0x07
    2c22:	b8 85       	ldd	r27, Y+8	; 0x08
    2c24:	29 85       	ldd	r18, Y+9	; 0x09
    2c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c28:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <HLCD_vSetCursorPosition>
	HLCD_vSendNumber(A_s32Number);
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	ab 81       	ldd	r26, Y+3	; 0x03
    2c3a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 dd 14 	call	0x29ba	; 0x29ba <HLCD_vSendNumber>
}
    2c44:	2c 96       	adiw	r28, 0x0c	; 12
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <HKPD_Init>:
        {'4', '5', '6', 'x'},
        {'1', '2', '3', '-'},
        {'C', '0', '=', '+'}
    };

void HKPD_Init(void){
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
	//MDIO_vSetPortDirection(KPD_PORT, 0x0FU);
	//MDIO_vSetPortValue(KPD_PORT,0xFFU);
	DDRB = 0x0FU;
    2c66:	e7 e3       	ldi	r30, 0x37	; 55
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	8f e0       	ldi	r24, 0x0F	; 15
    2c6c:	80 83       	st	Z, r24
	PORTB = 0xFFU;
    2c6e:	e8 e3       	ldi	r30, 0x38	; 56
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	80 83       	st	Z, r24
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <HKPD_U8GetPressedKey>:
u8 HKPD_U8GetPressedKey(void){
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	62 97       	sbiw	r28, 0x12	; 18
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61

    u8 local_u8Key = 0;
    2c90:	19 8a       	std	Y+17, r1	; 0x11

    for (u8 row = 0; row < 4; row++) {
    2c92:	18 8a       	std	Y+16, r1	; 0x10
    2c94:	b9 c0       	rjmp	.+370    	; 0x2e08 <HKPD_U8GetPressedKey+0x18c>
        // Set the current row to LOW
        MDIO_vSetPinValue(KPD_PORT, row, LOW);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	68 89       	ldd	r22, Y+16	; 0x10
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
        // Check each column for a pressed key
        for (u8 col = 4; col < 8; col++) {
    2ca0:	84 e0       	ldi	r24, 0x04	; 4
    2ca2:	8f 87       	std	Y+15, r24	; 0x0f
    2ca4:	a5 c0       	rjmp	.+330    	; 0x2df0 <HKPD_U8GetPressedKey+0x174>
            // Check if the column pin is LOW (key pressed)
            if (MDIO_U8GetPinValue(KPD_PORT, col) == 0) {
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2caa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <HKPD_U8GetPressedKey+0x38>
    2cb2:	9b c0       	rjmp	.+310    	; 0x2dea <HKPD_U8GetPressedKey+0x16e>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a0 e2       	ldi	r26, 0x20	; 32
    2cba:	b1 e4       	ldi	r27, 0x41	; 65
    2cbc:	8b 87       	std	Y+11, r24	; 0x0b
    2cbe:	9c 87       	std	Y+12, r25	; 0x0c
    2cc0:	ad 87       	std	Y+13, r26	; 0x0d
    2cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a ef       	ldi	r20, 0xFA	; 250
    2cd2:	54 e4       	ldi	r21, 0x44	; 68
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8f 83       	std	Y+7, r24	; 0x07
    2cde:	98 87       	std	Y+8, r25	; 0x08
    2ce0:	a9 87       	std	Y+9, r26	; 0x09
    2ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <HKPD_U8GetPressedKey+0x8a>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <HKPD_U8GetPressedKey+0x108>
	else if (__tmp > 65535)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <HKPD_U8GetPressedKey+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <HKPD_U8GetPressedKey+0xea>
    2d48:	88 ec       	ldi	r24, 0xC8	; 200
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <HKPD_U8GetPressedKey+0xd8>
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <HKPD_U8GetPressedKey+0xcc>
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <HKPD_U8GetPressedKey+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <HKPD_U8GetPressedKey+0x114>
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(10); // Debounce delay (adjust as needed)
                // Check again to confirm the key press
                if (MDIO_U8GetPinValue(KPD_PORT, col) == 0) {
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d9c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    2da0:	88 23       	and	r24, r24
    2da2:	19 f5       	brne	.+70     	; 0x2dea <HKPD_U8GetPressedKey+0x16e>
                    // Wait for key release
                    while (MDIO_U8GetPinValue(KPD_PORT, col) == 0);
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2da8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    2dac:	88 23       	and	r24, r24
    2dae:	d1 f3       	breq	.-12     	; 0x2da4 <HKPD_U8GetPressedKey+0x128>
                    // Key press confirmed
                    local_u8Key = keys[row][col - 4];
    2db0:	88 89       	ldd	r24, Y+16	; 0x10
    2db2:	48 2f       	mov	r20, r24
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9c 01       	movw	r18, r24
    2dbe:	24 50       	subi	r18, 0x04	; 4
    2dc0:	30 40       	sbci	r19, 0x00	; 0
    2dc2:	ca 01       	movw	r24, r20
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	82 0f       	add	r24, r18
    2dce:	93 1f       	adc	r25, r19
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e1 5d       	subi	r30, 0xD1	; 209
    2dd4:	fb 4f       	sbci	r31, 0xFB	; 251
    2dd6:	80 81       	ld	r24, Z
    2dd8:	89 8b       	std	Y+17, r24	; 0x11
                    // Release the row (set it back to HIGH)
                    MDIO_vSetPinValue(KPD_PORT, row, HIGH);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	68 89       	ldd	r22, Y+16	; 0x10
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
                    // Return the detected key
                    return local_u8Key;
    2de4:	89 89       	ldd	r24, Y+17	; 0x11
    2de6:	8a 8b       	std	Y+18, r24	; 0x12
    2de8:	15 c0       	rjmp	.+42     	; 0x2e14 <HKPD_U8GetPressedKey+0x198>

    for (u8 row = 0; row < 4; row++) {
        // Set the current row to LOW
        MDIO_vSetPinValue(KPD_PORT, row, LOW);
        // Check each column for a pressed key
        for (u8 col = 4; col < 8; col++) {
    2dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dec:	8f 5f       	subi	r24, 0xFF	; 255
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df2:	88 30       	cpi	r24, 0x08	; 8
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <HKPD_U8GetPressedKey+0x17c>
    2df6:	57 cf       	rjmp	.-338    	; 0x2ca6 <HKPD_U8GetPressedKey+0x2a>
                    return local_u8Key;
                }
            }
        }
        // Release the current row (set it back to HIGH)
        MDIO_vSetPinValue(KPD_PORT, row, HIGH);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	68 89       	ldd	r22, Y+16	; 0x10
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
}
u8 HKPD_U8GetPressedKey(void){

    u8 local_u8Key = 0;

    for (u8 row = 0; row < 4; row++) {
    2e02:	88 89       	ldd	r24, Y+16	; 0x10
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	88 8b       	std	Y+16, r24	; 0x10
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	84 30       	cpi	r24, 0x04	; 4
    2e0c:	08 f4       	brcc	.+2      	; 0x2e10 <HKPD_U8GetPressedKey+0x194>
    2e0e:	43 cf       	rjmp	.-378    	; 0x2c96 <HKPD_U8GetPressedKey+0x1a>
        }
        // Release the current row (set it back to HIGH)
        MDIO_vSetPinValue(KPD_PORT, row, HIGH);
    }
    // No key pressed
    return local_u8Key;
    2e10:	89 89       	ldd	r24, Y+17	; 0x11
    2e12:	8a 8b       	std	Y+18, r24	; 0x12
    2e14:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2e16:	62 96       	adiw	r28, 0x12	; 18
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <SW1_Callback>:

#include "app.h"

#define SYSTEM_PSW		1122
UART_tcfgInitialize UART1;
void SW1_Callback(void){
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Check for SW1 status,
	 * if pressed -> turn on motor
	 * if not pressed -> turn off motor
	 */
	if(!MDIO_U8GetPinValue(SW1_PORT, SW1_PIN)){
    2e30:	83 e0       	ldi	r24, 0x03	; 3
    2e32:	62 e0       	ldi	r22, 0x02	; 2
    2e34:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    2e38:	88 23       	and	r24, r24
    2e3a:	41 f4       	brne	.+16     	; 0x2e4c <SW1_Callback+0x24>
		Set_Motor_Value(Motor_ON);
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	0e 94 44 19 	call	0x3288	; 0x3288 <Set_Motor_Value>
		LOG("\n\r***Switch 1 pressed! Manually turning on motor!\n\r\n\r");
    2e42:	80 e6       	ldi	r24, 0x60	; 96
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <SW1_Callback+0x32>
	}
	else{
		Set_Motor_Value(Motor_OFF);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	0e 94 44 19 	call	0x3288	; 0x3288 <Set_Motor_Value>
		LOG("\n\r***Switch 1 released! Manually turning off motor!\n\r\n\r");
    2e52:	86 e9       	ldi	r24, 0x96	; 150
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
	}
}
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <SW2_Callback>:

void SW2_Callback(void){
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Check for SW2 status,
	 * if pressed -> turn on lamp
	 * if not pressed -> turn off lamp
	 */
	if(!MDIO_U8GetPinValue(SW2_PORT, SW2_PIN)){
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	63 e0       	ldi	r22, 0x03	; 3
    2e6c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    2e70:	88 23       	and	r24, r24
    2e72:	41 f4       	brne	.+16     	; 0x2e84 <SW2_Callback+0x24>
		Set_Lamp_Value(Lamp_ON);
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	0e 94 2e 19 	call	0x325c	; 0x325c <Set_Lamp_Value>
		LOG("\n\r***Switch 2 pressed! Manually turning on lamp!\n\r\n\r");
    2e7a:	8e ec       	ldi	r24, 0xCE	; 206
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
    2e82:	07 c0       	rjmp	.+14     	; 0x2e92 <SW2_Callback+0x32>
	}
	else{
		Set_Lamp_Value(Lamp_OFF);
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	0e 94 2e 19 	call	0x325c	; 0x325c <Set_Lamp_Value>
		LOG("\n\r***Switch 2 released! Manually turning off lamp!\n\r\n\r");
    2e8a:	83 e0       	ldi	r24, 0x03	; 3
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
	}
}
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <app_init>:

void app_init(void){
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	29 97       	sbiw	r28, 0x09	; 9
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
	/* Motor Pin Init */
	MDIO_vSetPinDirection(MOTOR_PORT, MOTOR_PIN, OUTPUT);
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	63 e0       	ldi	r22, 0x03	; 3
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	MDIO_vSetPinValue(MOTOR_PORT, MOTOR_PIN, HIGH);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	63 e0       	ldi	r22, 0x03	; 3
    2eba:	41 e0       	ldi	r20, 0x01	; 1
    2ebc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>

	/* Lamp Pin Init */
	MDIO_vSetPinDirection(LAMP_PORT, LAMP_PIN, OUTPUT);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	62 e0       	ldi	r22, 0x02	; 2
    2ec4:	41 e0       	ldi	r20, 0x01	; 1
    2ec6:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	MDIO_vSetPinValue(LAMP_PORT, LAMP_PIN, HIGH);
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	62 e0       	ldi	r22, 0x02	; 2
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>

	/* ADC Init */
	MADC_vInit();
    2ed4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <MADC_vInit>

	/* Switches and EXTI Init */
	MDIO_vSetPinDirection(SW1_PORT, SW1_PIN, INPUT);
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	62 e0       	ldi	r22, 0x02	; 2
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(SW2_PORT, SW2_PIN, INPUT);
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	63 e0       	ldi	r22, 0x03	; 3
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 2f 0b 	call	0x165e	; 0x165e <MDIO_vSetPinDirection>
	MDIO_vSetPinValue(SW1_PORT, SW1_PIN, HIGH);
    2eec:	83 e0       	ldi	r24, 0x03	; 3
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	MDIO_vSetPinValue(SW2_PORT, SW2_PIN, HIGH);
    2ef6:	83 e0       	ldi	r24, 0x03	; 3
    2ef8:	63 e0       	ldi	r22, 0x03	; 3
    2efa:	41 e0       	ldi	r20, 0x01	; 1
    2efc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
	EXTI_cfg SW1_EXTI = {.INTx = INT0, .INTx_MODE = MODE_LOGICAL_CHANGE, .pf_Callback = SW1_Callback};
    2f00:	1a 82       	std	Y+2, r1	; 0x02
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	8b 83       	std	Y+3, r24	; 0x03
    2f06:	84 e1       	ldi	r24, 0x14	; 20
    2f08:	97 e1       	ldi	r25, 0x17	; 23
    2f0a:	9d 83       	std	Y+5, r25	; 0x05
    2f0c:	8c 83       	std	Y+4, r24	; 0x04
	EXTI_cfg SW2_EXTI = {.INTx = INT1, .INTx_MODE = MODE_LOGICAL_CHANGE, .pf_Callback = SW2_Callback};
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	8e 83       	std	Y+6, r24	; 0x06
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	8f 83       	std	Y+7, r24	; 0x07
    2f16:	80 e3       	ldi	r24, 0x30	; 48
    2f18:	97 e1       	ldi	r25, 0x17	; 23
    2f1a:	99 87       	std	Y+9, r25	; 0x09
    2f1c:	88 87       	std	Y+8, r24	; 0x08
	EXTI_vEnableEXTI(&SW1_EXTI);
    2f1e:	ce 01       	movw	r24, r28
    2f20:	02 96       	adiw	r24, 0x02	; 2
    2f22:	0e 94 3d 09 	call	0x127a	; 0x127a <EXTI_vEnableEXTI>
	EXTI_vEnableEXTI(&SW2_EXTI);
    2f26:	ce 01       	movw	r24, r28
    2f28:	06 96       	adiw	r24, 0x06	; 6
    2f2a:	0e 94 3d 09 	call	0x127a	; 0x127a <EXTI_vEnableEXTI>

	/* Keypad Init */
	HKPD_Init();
    2f2e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <HKPD_Init>

	/* LCD Init */
	HLCD_vInit();
    2f32:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_vInit>

	/* UART Init */
	UART1.GLOBAL_tcfgCharSize = CHAR_8_BITS;
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	80 93 47 04 	sts	0x0447, r24
	UART1.GLOBAL_tcfgParityState = PARITY_DISABLED;
    2f3c:	10 92 48 04 	sts	0x0448, r1
	UART1.GLOBAL_tcfgStopBits = STOP_BITS_1;
    2f40:	10 92 49 04 	sts	0x0449, r1
	UART1.GLOBAL_tcfgUartBaudRate1X = UART_BR1X_9600;
    2f44:	83 e3       	ldi	r24, 0x33	; 51
    2f46:	80 93 4d 04 	sts	0x044D, r24
	UART1.GLOBAL_tcfgUartClkMode = UART_ASYNCHRONOUS;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	80 93 4e 04 	sts	0x044E, r24
	UART1.GLOBAL_tcfgUartCommMode = UART_1X_SPEED;
    2f50:	10 92 4f 04 	sts	0x044F, r1
	UART1.GLOBAL_tcfgUartInterrupt = UART_INTERRUPT_DISABLED;
    2f54:	10 92 4a 04 	sts	0x044A, r1
	UART_vInit(&UART1);
    2f58:	87 e4       	ldi	r24, 0x47	; 71
    2f5a:	94 e0       	ldi	r25, 0x04	; 4
    2f5c:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_vInit>
	UART_vEnable(&UART1);
    2f60:	87 e4       	ldi	r24, 0x47	; 71
    2f62:	94 e0       	ldi	r25, 0x04	; 4
    2f64:	0e 94 85 08 	call	0x110a	; 0x110a <UART_vEnable>
	u8 cc;
	while(1){
		cc = UART_u8ReceiveData();
    2f68:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <UART_u8ReceiveData>
    2f6c:	89 83       	std	Y+1, r24	; 0x01
		UART_vSendData(cc);
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	0e 94 b9 08 	call	0x1172	; 0x1172 <UART_vSendData>
		if(cc == 'C'){
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	83 34       	cpi	r24, 0x43	; 67
    2f78:	b9 f7       	brne	.-18     	; 0x2f68 <app_init+0xd0>
			UART_vSendString((u8*)"\n\r\n\r\n\r");
    2f7a:	8a e3       	ldi	r24, 0x3A	; 58
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			break;
		}
	}
    2f82:	29 96       	adiw	r28, 0x09	; 9
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <Read_Password>:
}

u8 Read_Password(void){
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	aa 97       	sbiw	r28, 0x2a	; 42
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Read password from keypad
	 * If password is correct, return 0
	 * If password is incorrect, return 1
	 */
    u8 str[] = "Enter Password: ";
    2fa8:	ce 01       	movw	r24, r28
    2faa:	45 96       	adiw	r24, 0x15	; 21
    2fac:	9f a3       	std	Y+39, r25	; 0x27
    2fae:	8e a3       	std	Y+38, r24	; 0x26
    2fb0:	e1 e4       	ldi	r30, 0x41	; 65
    2fb2:	f1 e0       	ldi	r31, 0x01	; 1
    2fb4:	f9 a7       	std	Y+41, r31	; 0x29
    2fb6:	e8 a7       	std	Y+40, r30	; 0x28
    2fb8:	f1 e1       	ldi	r31, 0x11	; 17
    2fba:	fa a7       	std	Y+42, r31	; 0x2a
    2fbc:	e8 a5       	ldd	r30, Y+40	; 0x28
    2fbe:	f9 a5       	ldd	r31, Y+41	; 0x29
    2fc0:	00 80       	ld	r0, Z
    2fc2:	88 a5       	ldd	r24, Y+40	; 0x28
    2fc4:	99 a5       	ldd	r25, Y+41	; 0x29
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	99 a7       	std	Y+41, r25	; 0x29
    2fca:	88 a7       	std	Y+40, r24	; 0x28
    2fcc:	ee a1       	ldd	r30, Y+38	; 0x26
    2fce:	ff a1       	ldd	r31, Y+39	; 0x27
    2fd0:	00 82       	st	Z, r0
    2fd2:	8e a1       	ldd	r24, Y+38	; 0x26
    2fd4:	9f a1       	ldd	r25, Y+39	; 0x27
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	9f a3       	std	Y+39, r25	; 0x27
    2fda:	8e a3       	std	Y+38, r24	; 0x26
    2fdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fde:	91 50       	subi	r25, 0x01	; 1
    2fe0:	9a a7       	std	Y+42, r25	; 0x2a
    2fe2:	ea a5       	ldd	r30, Y+42	; 0x2a
    2fe4:	ee 23       	and	r30, r30
    2fe6:	51 f7       	brne	.-44     	; 0x2fbc <Read_Password+0x28>
    //u8 strinvalid[] = "invalid character";
    u8 keypad_entry;
    u32 password = 0;
    2fe8:	18 8a       	std	Y+16, r1	; 0x10
    2fea:	19 8a       	std	Y+17, r1	; 0x11
    2fec:	1a 8a       	std	Y+18, r1	; 0x12
    2fee:	1b 8a       	std	Y+19, r1	; 0x13
    HLCD_vSendString(str);
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	45 96       	adiw	r24, 0x15	; 21
    2ff4:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
	HLCD_vSetCursorPosition(2, 1);
    2ff8:	62 e0       	ldi	r22, 0x02	; 2
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	21 e0       	ldi	r18, 0x01	; 1
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <HLCD_vSetCursorPosition>

    while (1) {
        keypad_entry = HKPD_U8GetPressedKey();
    300c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <HKPD_U8GetPressedKey>
    3010:	8c 8b       	std	Y+20, r24	; 0x14

        if (keypad_entry == '=') {
    3012:	8c 89       	ldd	r24, Y+20	; 0x14
    3014:	8d 33       	cpi	r24, 0x3D	; 61
    3016:	09 f4       	brne	.+2      	; 0x301a <Read_Password+0x86>
    3018:	a3 c0       	rjmp	.+326    	; 0x3160 <Read_Password+0x1cc>
            break;
        } else if ((keypad_entry >= '0') && (keypad_entry <= '9')) {
    301a:	8c 89       	ldd	r24, Y+20	; 0x14
    301c:	80 33       	cpi	r24, 0x30	; 48
    301e:	b0 f3       	brcs	.-20     	; 0x300c <Read_Password+0x78>
    3020:	8c 89       	ldd	r24, Y+20	; 0x14
    3022:	8a 33       	cpi	r24, 0x3A	; 58
    3024:	98 f7       	brcc	.-26     	; 0x300c <Read_Password+0x78>
            HLCD_vSendData(keypad_entry);
    3026:	8c 89       	ldd	r24, Y+20	; 0x14
    3028:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a8 e4       	ldi	r26, 0x48	; 72
    3032:	b2 e4       	ldi	r27, 0x42	; 66
    3034:	8b 87       	std	Y+11, r24	; 0x0b
    3036:	9c 87       	std	Y+12, r25	; 0x0c
    3038:	ad 87       	std	Y+13, r26	; 0x0d
    303a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6b 85       	ldd	r22, Y+11	; 0x0b
    303e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3040:	8d 85       	ldd	r24, Y+13	; 0x0d
    3042:	9e 85       	ldd	r25, Y+14	; 0x0e
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	54 e4       	ldi	r21, 0x44	; 68
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8f 83       	std	Y+7, r24	; 0x07
    3056:	98 87       	std	Y+8, r25	; 0x08
    3058:	a9 87       	std	Y+9, r26	; 0x09
    305a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305c:	6f 81       	ldd	r22, Y+7	; 0x07
    305e:	78 85       	ldd	r23, Y+8	; 0x08
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <Read_Password+0xea>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <Read_Password+0x168>
	else if (__tmp > 65535)
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <Read_Password+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6b 85       	ldd	r22, Y+11	; 0x0b
    3098:	7c 85       	ldd	r23, Y+12	; 0x0c
    309a:	8d 85       	ldd	r24, Y+13	; 0x0d
    309c:	9e 85       	ldd	r25, Y+14	; 0x0e
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
    30be:	0f c0       	rjmp	.+30     	; 0x30de <Read_Password+0x14a>
    30c0:	88 ec       	ldi	r24, 0xC8	; 200
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <Read_Password+0x138>
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <Read_Password+0x12c>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <Read_Password+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <Read_Password+0x174>
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(50);
            password += (keypad_entry - 48);
    3110:	8c 89       	ldd	r24, Y+20	; 0x14
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	c0 97       	sbiw	r24, 0x30	; 48
    3118:	9c 01       	movw	r18, r24
    311a:	44 27       	eor	r20, r20
    311c:	37 fd       	sbrc	r19, 7
    311e:	40 95       	com	r20
    3120:	54 2f       	mov	r21, r20
    3122:	88 89       	ldd	r24, Y+16	; 0x10
    3124:	99 89       	ldd	r25, Y+17	; 0x11
    3126:	aa 89       	ldd	r26, Y+18	; 0x12
    3128:	bb 89       	ldd	r27, Y+19	; 0x13
    312a:	82 0f       	add	r24, r18
    312c:	93 1f       	adc	r25, r19
    312e:	a4 1f       	adc	r26, r20
    3130:	b5 1f       	adc	r27, r21
    3132:	88 8b       	std	Y+16, r24	; 0x10
    3134:	99 8b       	std	Y+17, r25	; 0x11
    3136:	aa 8b       	std	Y+18, r26	; 0x12
    3138:	bb 8b       	std	Y+19, r27	; 0x13
            password *= 10;
    313a:	88 89       	ldd	r24, Y+16	; 0x10
    313c:	99 89       	ldd	r25, Y+17	; 0x11
    313e:	aa 89       	ldd	r26, Y+18	; 0x12
    3140:	bb 89       	ldd	r27, Y+19	; 0x13
    3142:	2a e0       	ldi	r18, 0x0A	; 10
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 00 1c 	call	0x3800	; 0x3800 <__mulsi3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	88 8b       	std	Y+16, r24	; 0x10
    3158:	99 8b       	std	Y+17, r25	; 0x11
    315a:	aa 8b       	std	Y+18, r26	; 0x12
    315c:	bb 8b       	std	Y+19, r27	; 0x13
    315e:	56 cf       	rjmp	.-340    	; 0x300c <Read_Password+0x78>
        } else { /* Do Nothing */ }
    }

    password /= 10;
    3160:	88 89       	ldd	r24, Y+16	; 0x10
    3162:	99 89       	ldd	r25, Y+17	; 0x11
    3164:	aa 89       	ldd	r26, Y+18	; 0x12
    3166:	bb 89       	ldd	r27, Y+19	; 0x13
    3168:	2a e0       	ldi	r18, 0x0A	; 10
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	0e 94 1f 1c 	call	0x383e	; 0x383e <__udivmodsi4>
    3178:	da 01       	movw	r26, r20
    317a:	c9 01       	movw	r24, r18
    317c:	88 8b       	std	Y+16, r24	; 0x10
    317e:	99 8b       	std	Y+17, r25	; 0x11
    3180:	aa 8b       	std	Y+18, r26	; 0x12
    3182:	bb 8b       	std	Y+19, r27	; 0x13

    // Check if the entered password is correct
    u8 ret_val = (password == SYSTEM_PSW) ? 0 : 1;
    3184:	1f 86       	std	Y+15, r1	; 0x0f
    3186:	88 89       	ldd	r24, Y+16	; 0x10
    3188:	99 89       	ldd	r25, Y+17	; 0x11
    318a:	aa 89       	ldd	r26, Y+18	; 0x12
    318c:	bb 89       	ldd	r27, Y+19	; 0x13
    318e:	82 36       	cpi	r24, 0x62	; 98
    3190:	f4 e0       	ldi	r31, 0x04	; 4
    3192:	9f 07       	cpc	r25, r31
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	af 07       	cpc	r26, r31
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	bf 07       	cpc	r27, r31
    319c:	11 f0       	breq	.+4      	; 0x31a2 <Read_Password+0x20e>
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	8f 87       	std	Y+15, r24	; 0x0f
    return ret_val;
    31a2:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    31a4:	aa 96       	adiw	r28, 0x2a	; 42
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <Get_Temperature_Value>:

u8 Get_Temperature_Value(void){
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	0f 92       	push	r0
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
	u8 ret_val = HLM35_vCallValue();
    31c0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <HLM35_vCallValue>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	89 83       	std	Y+1, r24	; 0x01
	return ret_val;
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <Get_LDR_Value>:

u8 Get_LDR_Value(void){
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	00 d0       	rcall	.+0      	; 0x31da <Get_LDR_Value+0x6>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <Get_LDR_Value+0x8>
    31dc:	00 d0       	rcall	.+0      	; 0x31de <Get_LDR_Value+0xa>
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
	double ret_val;
	u16 adc_value = HLDR_vCallValue();
    31e2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <HLDR_vCallValue>
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
	adc_value++;
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	01 96       	adiw	r24, 0x01	; 1
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
	ret_val = (adc_value / MAX_ADC_VAL) * 100; // Get percentage
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	cc 01       	movw	r24, r24
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	48 ec       	ldi	r20, 0xC8	; 200
    3228:	52 e4       	ldi	r21, 0x42	; 66
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	8b 83       	std	Y+3, r24	; 0x03
    3234:	9c 83       	std	Y+4, r25	; 0x04
    3236:	ad 83       	std	Y+5, r26	; 0x05
    3238:	be 83       	std	Y+6, r27	; 0x06
	return (u8)ret_val;
    323a:	6b 81       	ldd	r22, Y+3	; 0x03
    323c:	7c 81       	ldd	r23, Y+4	; 0x04
    323e:	8d 81       	ldd	r24, Y+5	; 0x05
    3240:	9e 81       	ldd	r25, Y+6	; 0x06
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
}
    324a:	26 96       	adiw	r28, 0x06	; 6
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <Set_Lamp_Value>:

void Set_Lamp_Value(enu_LampControl _val){
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <Set_Lamp_Value+0x6>
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	8a 83       	std	Y+2, r24	; 0x02
	u8 state = (_val == Lamp_OFF) ? HIGH : LOW;
    3268:	19 82       	std	Y+1, r1	; 0x01
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	88 23       	and	r24, r24
    326e:	11 f4       	brne	.+4      	; 0x3274 <Set_Lamp_Value+0x18>
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPinValue(LAMP_PORT, LAMP_PIN, state);
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	62 e0       	ldi	r22, 0x02	; 2
    3278:	49 81       	ldd	r20, Y+1	; 0x01
    327a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	08 95       	ret

00003288 <Set_Motor_Value>:

void Set_Motor_Value(enu_MotorControl _val){
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	00 d0       	rcall	.+0      	; 0x328e <Set_Motor_Value+0x6>
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	8a 83       	std	Y+2, r24	; 0x02
	u8 state = (_val == Motor_OFF) ? HIGH : LOW;
    3294:	19 82       	std	Y+1, r1	; 0x01
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	88 23       	and	r24, r24
    329a:	11 f4       	brne	.+4      	; 0x32a0 <Set_Motor_Value+0x18>
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPinValue(MOTOR_PORT, MOTOR_PIN, state);
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	63 e0       	ldi	r22, 0x03	; 3
    32a4:	49 81       	ldd	r20, Y+1	; 0x01
    32a6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <MDIO_vSetPinValue>
}
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <Halt_System>:

void Halt_System(void){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Halt system
	 */
	HLCD_vDisplayClear();
    32bc:	0e 94 66 14 	call	0x28cc	; 0x28cc <HLCD_vDisplayClear>
	HLCD_vSendString((u8*)"System is stoped!");
    32c0:	82 e5       	ldi	r24, 0x52	; 82
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
	LOG("System is stoped!\n\r");
    32c8:	84 e6       	ldi	r24, 0x64	; 100
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
	LOG("Reason: Invalid login \n\r");
    32d0:	88 e7       	ldi	r24, 0x78	; 120
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
	UART_vDisable(&UART1);
    32d8:	87 e4       	ldi	r24, 0x47	; 71
    32da:	94 e0       	ldi	r25, 0x04	; 4
    32dc:	0e 94 9f 08 	call	0x113e	; 0x113e <UART_vDisable>
    32e0:	ff cf       	rjmp	.-2      	; 0x32e0 <Halt_System+0x2c>

000032e2 <main>:
u8 login_tries = 0;
u8 temp_value;
u16 ldr_value;
u8 temp_string[5];

int main(void){
    32e2:	ef 92       	push	r14
    32e4:	ff 92       	push	r15
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	e3 97       	sbiw	r28, 0x33	; 51
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61

	u8 login_tries = 0;
    32fe:	1e a6       	std	Y+46, r1	; 0x2e
	u8 temp_value;
	u16 ldr_value;
	u8 temp_string[5];
	app_init();
    3300:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <app_init>
	LOG("Welcome to Samrt Home\n\r");
    3304:	81 e9       	ldi	r24, 0x91	; 145
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
	while(1){
		if(Read_Password()){
    330c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <Read_Password>
    3310:	88 23       	and	r24, r24
    3312:	09 f4       	brne	.+2      	; 0x3316 <main+0x34>
    3314:	88 c0       	rjmp	.+272    	; 0x3426 <main+0x144>
			LOG("Fail login!\n\r");
    3316:	89 ea       	ldi	r24, 0xA9	; 169
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			login_tries++;
    331e:	8e a5       	ldd	r24, Y+46	; 0x2e
    3320:	8f 5f       	subi	r24, 0xFF	; 255
    3322:	8e a7       	std	Y+46, r24	; 0x2e
			if(MAX_LOGIN_TRIES <= login_tries)
    3324:	8e a5       	ldd	r24, Y+46	; 0x2e
    3326:	83 30       	cpi	r24, 0x03	; 3
    3328:	18 f0       	brcs	.+6      	; 0x3330 <main+0x4e>
				Halt_System();
    332a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Halt_System>
    332e:	ee cf       	rjmp	.-36     	; 0x330c <main+0x2a>
			else{
				HLCD_vDisplayClear();
    3330:	0e 94 66 14 	call	0x28cc	; 0x28cc <HLCD_vDisplayClear>
				HLCD_vSendString((u8*)"Try Again!");
    3334:	87 eb       	ldi	r24, 0xB7	; 183
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	aa ef       	ldi	r26, 0xFA	; 250
    3342:	b3 e4       	ldi	r27, 0x43	; 67
    3344:	8f a3       	std	Y+39, r24	; 0x27
    3346:	98 a7       	std	Y+40, r25	; 0x28
    3348:	a9 a7       	std	Y+41, r26	; 0x29
    334a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334c:	6f a1       	ldd	r22, Y+39	; 0x27
    334e:	78 a5       	ldd	r23, Y+40	; 0x28
    3350:	89 a5       	ldd	r24, Y+41	; 0x29
    3352:	9a a5       	ldd	r25, Y+42	; 0x2a
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a ef       	ldi	r20, 0xFA	; 250
    335a:	54 e4       	ldi	r21, 0x44	; 68
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	8b a3       	std	Y+35, r24	; 0x23
    3366:	9c a3       	std	Y+36, r25	; 0x24
    3368:	ad a3       	std	Y+37, r26	; 0x25
    336a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    336c:	6b a1       	ldd	r22, Y+35	; 0x23
    336e:	7c a1       	ldd	r23, Y+36	; 0x24
    3370:	8d a1       	ldd	r24, Y+37	; 0x25
    3372:	9e a1       	ldd	r25, Y+38	; 0x26
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <main+0xac>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9a a3       	std	Y+34, r25	; 0x22
    338a:	89 a3       	std	Y+33, r24	; 0x21
    338c:	3f c0       	rjmp	.+126    	; 0x340c <main+0x12a>
	else if (__tmp > 65535)
    338e:	6b a1       	ldd	r22, Y+35	; 0x23
    3390:	7c a1       	ldd	r23, Y+36	; 0x24
    3392:	8d a1       	ldd	r24, Y+37	; 0x25
    3394:	9e a1       	ldd	r25, Y+38	; 0x26
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	4c f5       	brge	.+82     	; 0x33f8 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a6:	6f a1       	ldd	r22, Y+39	; 0x27
    33a8:	78 a5       	ldd	r23, Y+40	; 0x28
    33aa:	89 a5       	ldd	r24, Y+41	; 0x29
    33ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9a a3       	std	Y+34, r25	; 0x22
    33cc:	89 a3       	std	Y+33, r24	; 0x21
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <main+0x10c>
    33d0:	88 ec       	ldi	r24, 0xC8	; 200
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	98 a3       	std	Y+32, r25	; 0x20
    33d6:	8f 8f       	std	Y+31, r24	; 0x1f
    33d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33da:	98 a1       	ldd	r25, Y+32	; 0x20
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <main+0xfa>
    33e0:	98 a3       	std	Y+32, r25	; 0x20
    33e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	89 a1       	ldd	r24, Y+33	; 0x21
    33e6:	9a a1       	ldd	r25, Y+34	; 0x22
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9a a3       	std	Y+34, r25	; 0x22
    33ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ee:	89 a1       	ldd	r24, Y+33	; 0x21
    33f0:	9a a1       	ldd	r25, Y+34	; 0x22
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <main+0xee>
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f8:	6b a1       	ldd	r22, Y+35	; 0x23
    33fa:	7c a1       	ldd	r23, Y+36	; 0x24
    33fc:	8d a1       	ldd	r24, Y+37	; 0x25
    33fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9a a3       	std	Y+34, r25	; 0x22
    340a:	89 a3       	std	Y+33, r24	; 0x21
    340c:	89 a1       	ldd	r24, Y+33	; 0x21
    340e:	9a a1       	ldd	r25, Y+34	; 0x22
    3410:	9e 8f       	std	Y+30, r25	; 0x1e
    3412:	8d 8f       	std	Y+29, r24	; 0x1d
    3414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <main+0x136>
    341c:	9e 8f       	std	Y+30, r25	; 0x1e
    341e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				HLCD_vDisplayClear();
    3420:	0e 94 66 14 	call	0x28cc	; 0x28cc <HLCD_vDisplayClear>
    3424:	73 cf       	rjmp	.-282    	; 0x330c <main+0x2a>
				continue;
			}
		}
		else{
			LOG("Successful login !\n\r");
    3426:	82 ec       	ldi	r24, 0xC2	; 194
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			HLCD_vDisplayClear();
    342e:	0e 94 66 14 	call	0x28cc	; 0x28cc <HLCD_vDisplayClear>
			HLCD_vSendString((u8*)"You can Access!");
    3432:	87 ed       	ldi	r24, 0xD7	; 215
    3434:	91 e0       	ldi	r25, 0x01	; 1
    3436:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	aa ef       	ldi	r26, 0xFA	; 250
    3440:	b3 e4       	ldi	r27, 0x43	; 67
    3442:	89 8f       	std	Y+25, r24	; 0x19
    3444:	9a 8f       	std	Y+26, r25	; 0x1a
    3446:	ab 8f       	std	Y+27, r26	; 0x1b
    3448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	69 8d       	ldd	r22, Y+25	; 0x19
    344c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    344e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a ef       	ldi	r20, 0xFA	; 250
    3458:	54 e4       	ldi	r21, 0x44	; 68
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	8d 8b       	std	Y+21, r24	; 0x15
    3464:	9e 8b       	std	Y+22, r25	; 0x16
    3466:	af 8b       	std	Y+23, r26	; 0x17
    3468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    346a:	6d 89       	ldd	r22, Y+21	; 0x15
    346c:	7e 89       	ldd	r23, Y+22	; 0x16
    346e:	8f 89       	ldd	r24, Y+23	; 0x17
    3470:	98 8d       	ldd	r25, Y+24	; 0x18
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	5f e3       	ldi	r21, 0x3F	; 63
    347a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    347e:	88 23       	and	r24, r24
    3480:	2c f4       	brge	.+10     	; 0x348c <main+0x1aa>
		__ticks = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9c 8b       	std	Y+20, r25	; 0x14
    3488:	8b 8b       	std	Y+19, r24	; 0x13
    348a:	3f c0       	rjmp	.+126    	; 0x350a <main+0x228>
	else if (__tmp > 65535)
    348c:	6d 89       	ldd	r22, Y+21	; 0x15
    348e:	7e 89       	ldd	r23, Y+22	; 0x16
    3490:	8f 89       	ldd	r24, Y+23	; 0x17
    3492:	98 8d       	ldd	r25, Y+24	; 0x18
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	4c f5       	brge	.+82     	; 0x34f6 <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	69 8d       	ldd	r22, Y+25	; 0x19
    34a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <main+0x20a>
    34ce:	88 ec       	ldi	r24, 0xC8	; 200
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	9a 8b       	std	Y+18, r25	; 0x12
    34d4:	89 8b       	std	Y+17, r24	; 0x11
    34d6:	89 89       	ldd	r24, Y+17	; 0x11
    34d8:	9a 89       	ldd	r25, Y+18	; 0x12
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <main+0x1f8>
    34de:	9a 8b       	std	Y+18, r25	; 0x12
    34e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	8b 89       	ldd	r24, Y+19	; 0x13
    34e4:	9c 89       	ldd	r25, Y+20	; 0x14
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	9c 8b       	std	Y+20, r25	; 0x14
    34ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	8b 89       	ldd	r24, Y+19	; 0x13
    34ee:	9c 89       	ldd	r25, Y+20	; 0x14
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f7       	brne	.-38     	; 0x34ce <main+0x1ec>
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f6:	6d 89       	ldd	r22, Y+21	; 0x15
    34f8:	7e 89       	ldd	r23, Y+22	; 0x16
    34fa:	8f 89       	ldd	r24, Y+23	; 0x17
    34fc:	98 8d       	ldd	r25, Y+24	; 0x18
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9c 8b       	std	Y+20, r25	; 0x14
    3508:	8b 8b       	std	Y+19, r24	; 0x13
    350a:	8b 89       	ldd	r24, Y+19	; 0x13
    350c:	9c 89       	ldd	r25, Y+20	; 0x14
    350e:	98 8b       	std	Y+16, r25	; 0x10
    3510:	8f 87       	std	Y+15, r24	; 0x0f
    3512:	8f 85       	ldd	r24, Y+15	; 0x0f
    3514:	98 89       	ldd	r25, Y+16	; 0x10
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <main+0x234>
    351a:	98 8b       	std	Y+16, r25	; 0x10
    351c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			HLCD_vDisplayClear();
    351e:	0e 94 66 14 	call	0x28cc	; 0x28cc <HLCD_vDisplayClear>
			break;
		}
	}
	HLCD_vSendString((u8*)"Temp");
    3522:	87 ee       	ldi	r24, 0xE7	; 231
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
	HLCD_vSendData_pos((u8)': ', STRINGS_ROW, SEPARATOR_COL);
    352a:	80 e2       	ldi	r24, 0x20	; 32
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	08 e0       	ldi	r16, 0x08	; 8
    3536:	10 e0       	ldi	r17, 0x00	; 0
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <HLCD_vSendData_pos>
	HLCD_vSendString((u8*)"Light");
    3540:	8c ee       	ldi	r24, 0xEC	; 236
    3542:	91 e0       	ldi	r25, 0x01	; 1
    3544:	0e 94 23 14 	call	0x2846	; 0x2846 <HLCD_vSendString>
	HLCD_vSendData_pos((u8)': ', VALUES_ROW, SEPARATOR_COL);
    3548:	80 e2       	ldi	r24, 0x20	; 32
    354a:	42 e0       	ldi	r20, 0x02	; 2
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	08 e0       	ldi	r16, 0x08	; 8
    3554:	10 e0       	ldi	r17, 0x00	; 0
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <HLCD_vSendData_pos>
	GIE_vEnableInterrupts();
    355e:	0e 94 21 09 	call	0x1242	; 0x1242 <GIE_vEnableInterrupts>
	while(1){
		LOG("------------------------------\n\r");
    3562:	82 ef       	ldi	r24, 0xF2	; 242
    3564:	91 e0       	ldi	r25, 0x01	; 1
    3566:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
		temp_value = Get_Temperature_Value();
    356a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <Get_Temperature_Value>
    356e:	8d a7       	std	Y+45, r24	; 0x2d
		ldr_value = Get_LDR_Value();
    3570:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <Get_LDR_Value>
    3574:	88 2f       	mov	r24, r24
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c a7       	std	Y+44, r25	; 0x2c
    357a:	8b a7       	std	Y+43, r24	; 0x2b
		HLCD_vSendString_pos(VALUE_REMOVE_STR, VALUES_ROW, TEMP_VAL_START);
    357c:	83 e1       	ldi	r24, 0x13	; 19
    357e:	92 e0       	ldi	r25, 0x02	; 2
    3580:	42 e0       	ldi	r20, 0x02	; 2
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	01 e0       	ldi	r16, 0x01	; 1
    358a:	10 e0       	ldi	r17, 0x00	; 0
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <HLCD_vSendString_pos>
		HLCD_vSendNumber_pos(temp_value, VALUES_ROW, TEMP_VAL_START);
    3594:	8d a5       	ldd	r24, Y+45	; 0x2d
    3596:	88 2f       	mov	r24, r24
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	a0 e0       	ldi	r26, 0x00	; 0
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	22 e0       	ldi	r18, 0x02	; 2
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	ee 24       	eor	r14, r14
    35ac:	ff 24       	eor	r15, r15
    35ae:	87 01       	movw	r16, r14
    35b0:	e3 94       	inc	r14
    35b2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <HLCD_vSendNumber_pos>
		HLCD_vSendData((u8)'C');
    35b6:	83 e4       	ldi	r24, 0x43	; 67
    35b8:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>
		HLCD_vSendString_pos(VALUE_REMOVE_STR, VALUES_ROW, LIGHT_VAL_START);
    35bc:	83 e1       	ldi	r24, 0x13	; 19
    35be:	92 e0       	ldi	r25, 0x02	; 2
    35c0:	42 e0       	ldi	r20, 0x02	; 2
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	09 e0       	ldi	r16, 0x09	; 9
    35ca:	10 e0       	ldi	r17, 0x00	; 0
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <HLCD_vSendString_pos>
		HLCD_vSendNumber_pos(ldr_value, VALUES_ROW, LIGHT_VAL_START);
    35d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    35d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    35d8:	cc 01       	movw	r24, r24
    35da:	a0 e0       	ldi	r26, 0x00	; 0
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	bc 01       	movw	r22, r24
    35e0:	cd 01       	movw	r24, r26
    35e2:	22 e0       	ldi	r18, 0x02	; 2
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	0f 2e       	mov	r0, r31
    35ec:	f9 e0       	ldi	r31, 0x09	; 9
    35ee:	ef 2e       	mov	r14, r31
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	ff 2e       	mov	r15, r31
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	0f 2f       	mov	r16, r31
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	1f 2f       	mov	r17, r31
    35fc:	f0 2d       	mov	r31, r0
    35fe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <HLCD_vSendNumber_pos>
		HLCD_vSendData((u8)'%');
    3602:	85 e2       	ldi	r24, 0x25	; 37
    3604:	0e 94 13 13 	call	0x2626	; 0x2626 <HLCD_vSendData>

		/* Convert temperature value to printable string */
		itoa(temp_value, (char*)temp_string, 10);
    3608:	8d a5       	ldd	r24, Y+45	; 0x2d
    360a:	88 2f       	mov	r24, r24
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9e 01       	movw	r18, r28
    3610:	21 5d       	subi	r18, 0xD1	; 209
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	b9 01       	movw	r22, r18
    3616:	4a e0       	ldi	r20, 0x0A	; 10
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	0e 94 93 1c 	call	0x3926	; 0x3926 <itoa>
		if(TEMP_THRESHOLD < temp_value){
    361e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3620:	8f 31       	cpi	r24, 0x1F	; 31
    3622:	80 f0       	brcs	.+32     	; 0x3644 <main+0x362>
			LOG("Motor is on, temperature = ");
    3624:	88 e1       	ldi	r24, 0x18	; 24
    3626:	92 e0       	ldi	r25, 0x02	; 2
    3628:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			LOG(temp_string);
    362c:	ce 01       	movw	r24, r28
    362e:	8f 96       	adiw	r24, 0x2f	; 47
    3630:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			LOG("C!\n\r");
    3634:	84 e3       	ldi	r24, 0x34	; 52
    3636:	92 e0       	ldi	r25, 0x02	; 2
    3638:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			Set_Motor_Value(Motor_ON);
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	0e 94 44 19 	call	0x3288	; 0x3288 <Set_Motor_Value>
    3642:	26 c0       	rjmp	.+76     	; 0x3690 <main+0x3ae>
		}
		else{
			/* If SW1 is not pressed */
			if(MDIO_U8GetPinValue(SW1_PORT, SW1_PIN)){
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	62 e0       	ldi	r22, 0x02	; 2
    3648:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    364c:	88 23       	and	r24, r24
    364e:	81 f0       	breq	.+32     	; 0x3670 <main+0x38e>
				LOG("Motor is off, temperature = ");
    3650:	89 e3       	ldi	r24, 0x39	; 57
    3652:	92 e0       	ldi	r25, 0x02	; 2
    3654:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG(temp_string);
    3658:	ce 01       	movw	r24, r28
    365a:	8f 96       	adiw	r24, 0x2f	; 47
    365c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("C!\n\r");
    3660:	84 e3       	ldi	r24, 0x34	; 52
    3662:	92 e0       	ldi	r25, 0x02	; 2
    3664:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				Set_Motor_Value(Motor_OFF);
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	0e 94 44 19 	call	0x3288	; 0x3288 <Set_Motor_Value>
    366e:	10 c0       	rjmp	.+32     	; 0x3690 <main+0x3ae>
			}
			else{
				LOG("Cannot turn off motor, switch 1 is pressed!\n\r");
    3670:	86 e5       	ldi	r24, 0x56	; 86
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("Current temperature = ");
    3678:	84 e8       	ldi	r24, 0x84	; 132
    367a:	92 e0       	ldi	r25, 0x02	; 2
    367c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG(temp_string);
    3680:	ce 01       	movw	r24, r28
    3682:	8f 96       	adiw	r24, 0x2f	; 47
    3684:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("C!\n\r");
    3688:	84 e3       	ldi	r24, 0x34	; 52
    368a:	92 e0       	ldi	r25, 0x02	; 2
    368c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			}
		}

		/* Convert LDR value to printable string */
		itoa(ldr_value, (char*)temp_string, 10);
    3690:	8b a5       	ldd	r24, Y+43	; 0x2b
    3692:	9c a5       	ldd	r25, Y+44	; 0x2c
    3694:	9e 01       	movw	r18, r28
    3696:	21 5d       	subi	r18, 0xD1	; 209
    3698:	3f 4f       	sbci	r19, 0xFF	; 255
    369a:	b9 01       	movw	r22, r18
    369c:	4a e0       	ldi	r20, 0x0A	; 10
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 93 1c 	call	0x3926	; 0x3926 <itoa>
		if(LDR_THRESHOLD > ldr_value){
    36a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36a8:	82 33       	cpi	r24, 0x32	; 50
    36aa:	91 05       	cpc	r25, r1
    36ac:	80 f4       	brcc	.+32     	; 0x36ce <main+0x3ec>
			LOG("Lamp is on, Light intensity = ");
    36ae:	8b e9       	ldi	r24, 0x9B	; 155
    36b0:	92 e0       	ldi	r25, 0x02	; 2
    36b2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			LOG(temp_string);
    36b6:	ce 01       	movw	r24, r28
    36b8:	8f 96       	adiw	r24, 0x2f	; 47
    36ba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			LOG("%!\n\r");
    36be:	8a eb       	ldi	r24, 0xBA	; 186
    36c0:	92 e0       	ldi	r25, 0x02	; 2
    36c2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
			Set_Lamp_Value(Lamp_ON);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 2e 19 	call	0x325c	; 0x325c <Set_Lamp_Value>
    36cc:	26 c0       	rjmp	.+76     	; 0x371a <main+0x438>
		}
		else{
			/* If SW2 is not pressed */
			if(MDIO_U8GetPinValue(SW2_PORT, SW2_PIN)){
    36ce:	83 e0       	ldi	r24, 0x03	; 3
    36d0:	63 e0       	ldi	r22, 0x03	; 3
    36d2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MDIO_U8GetPinValue>
    36d6:	88 23       	and	r24, r24
    36d8:	81 f0       	breq	.+32     	; 0x36fa <main+0x418>
				LOG("Lamp is off, Light intensity = ");
    36da:	8f eb       	ldi	r24, 0xBF	; 191
    36dc:	92 e0       	ldi	r25, 0x02	; 2
    36de:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG(temp_string);
    36e2:	ce 01       	movw	r24, r28
    36e4:	8f 96       	adiw	r24, 0x2f	; 47
    36e6:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("%!\n\r");
    36ea:	8a eb       	ldi	r24, 0xBA	; 186
    36ec:	92 e0       	ldi	r25, 0x02	; 2
    36ee:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				Set_Lamp_Value(Lamp_OFF);
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	0e 94 2e 19 	call	0x325c	; 0x325c <Set_Lamp_Value>
    36f8:	10 c0       	rjmp	.+32     	; 0x371a <main+0x438>
			}
			else{
				LOG("Cannot turn off lamp, switch 2 is pressed!\n\r");
    36fa:	8f ed       	ldi	r24, 0xDF	; 223
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("Current Light intensity = ");
    3702:	8c e0       	ldi	r24, 0x0C	; 12
    3704:	93 e0       	ldi	r25, 0x03	; 3
    3706:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG(temp_string);
    370a:	ce 01       	movw	r24, r28
    370c:	8f 96       	adiw	r24, 0x2f	; 47
    370e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
				LOG("%!\n\r");
    3712:	8a eb       	ldi	r24, 0xBA	; 186
    3714:	92 e0       	ldi	r25, 0x02	; 2
    3716:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART_vSendString>
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	aa e7       	ldi	r26, 0x7A	; 122
    3720:	b4 e4       	ldi	r27, 0x44	; 68
    3722:	8b 87       	std	Y+11, r24	; 0x0b
    3724:	9c 87       	std	Y+12, r25	; 0x0c
    3726:	ad 87       	std	Y+13, r26	; 0x0d
    3728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372a:	6b 85       	ldd	r22, Y+11	; 0x0b
    372c:	7c 85       	ldd	r23, Y+12	; 0x0c
    372e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3730:	9e 85       	ldd	r25, Y+14	; 0x0e
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	4a ef       	ldi	r20, 0xFA	; 250
    3738:	54 e4       	ldi	r21, 0x44	; 68
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	8f 83       	std	Y+7, r24	; 0x07
    3744:	98 87       	std	Y+8, r25	; 0x08
    3746:	a9 87       	std	Y+9, r26	; 0x09
    3748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374a:	6f 81       	ldd	r22, Y+7	; 0x07
    374c:	78 85       	ldd	r23, Y+8	; 0x08
    374e:	89 85       	ldd	r24, Y+9	; 0x09
    3750:	9a 85       	ldd	r25, Y+10	; 0x0a
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e8       	ldi	r20, 0x80	; 128
    3758:	5f e3       	ldi	r21, 0x3F	; 63
    375a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    375e:	88 23       	and	r24, r24
    3760:	2c f4       	brge	.+10     	; 0x376c <main+0x48a>
		__ticks = 1;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	9e 83       	std	Y+6, r25	; 0x06
    3768:	8d 83       	std	Y+5, r24	; 0x05
    376a:	3f c0       	rjmp	.+126    	; 0x37ea <main+0x508>
	else if (__tmp > 65535)
    376c:	6f 81       	ldd	r22, Y+7	; 0x07
    376e:	78 85       	ldd	r23, Y+8	; 0x08
    3770:	89 85       	ldd	r24, Y+9	; 0x09
    3772:	9a 85       	ldd	r25, Y+10	; 0x0a
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	4f e7       	ldi	r20, 0x7F	; 127
    377a:	57 e4       	ldi	r21, 0x47	; 71
    377c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3780:	18 16       	cp	r1, r24
    3782:	4c f5       	brge	.+82     	; 0x37d6 <main+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3784:	6b 85       	ldd	r22, Y+11	; 0x0b
    3786:	7c 85       	ldd	r23, Y+12	; 0x0c
    3788:	8d 85       	ldd	r24, Y+13	; 0x0d
    378a:	9e 85       	ldd	r25, Y+14	; 0x0e
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e2       	ldi	r20, 0x20	; 32
    3792:	51 e4       	ldi	r21, 0x41	; 65
    3794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	8d 83       	std	Y+5, r24	; 0x05
    37ac:	0f c0       	rjmp	.+30     	; 0x37cc <main+0x4ea>
    37ae:	88 ec       	ldi	r24, 0xC8	; 200
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	9c 83       	std	Y+4, r25	; 0x04
    37b4:	8b 83       	std	Y+3, r24	; 0x03
    37b6:	8b 81       	ldd	r24, Y+3	; 0x03
    37b8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <main+0x4d8>
    37be:	9c 83       	std	Y+4, r25	; 0x04
    37c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	9e 83       	std	Y+6, r25	; 0x06
    37ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37cc:	8d 81       	ldd	r24, Y+5	; 0x05
    37ce:	9e 81       	ldd	r25, Y+6	; 0x06
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	69 f7       	brne	.-38     	; 0x37ae <main+0x4cc>
    37d4:	c6 ce       	rjmp	.-628    	; 0x3562 <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d6:	6f 81       	ldd	r22, Y+7	; 0x07
    37d8:	78 85       	ldd	r23, Y+8	; 0x08
    37da:	89 85       	ldd	r24, Y+9	; 0x09
    37dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	9a 83       	std	Y+2, r25	; 0x02
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <main+0x514>
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	b1 ce       	rjmp	.-670    	; 0x3562 <main+0x280>

00003800 <__mulsi3>:
    3800:	62 9f       	mul	r22, r18
    3802:	d0 01       	movw	r26, r0
    3804:	73 9f       	mul	r23, r19
    3806:	f0 01       	movw	r30, r0
    3808:	82 9f       	mul	r24, r18
    380a:	e0 0d       	add	r30, r0
    380c:	f1 1d       	adc	r31, r1
    380e:	64 9f       	mul	r22, r20
    3810:	e0 0d       	add	r30, r0
    3812:	f1 1d       	adc	r31, r1
    3814:	92 9f       	mul	r25, r18
    3816:	f0 0d       	add	r31, r0
    3818:	83 9f       	mul	r24, r19
    381a:	f0 0d       	add	r31, r0
    381c:	74 9f       	mul	r23, r20
    381e:	f0 0d       	add	r31, r0
    3820:	65 9f       	mul	r22, r21
    3822:	f0 0d       	add	r31, r0
    3824:	99 27       	eor	r25, r25
    3826:	72 9f       	mul	r23, r18
    3828:	b0 0d       	add	r27, r0
    382a:	e1 1d       	adc	r30, r1
    382c:	f9 1f       	adc	r31, r25
    382e:	63 9f       	mul	r22, r19
    3830:	b0 0d       	add	r27, r0
    3832:	e1 1d       	adc	r30, r1
    3834:	f9 1f       	adc	r31, r25
    3836:	bd 01       	movw	r22, r26
    3838:	cf 01       	movw	r24, r30
    383a:	11 24       	eor	r1, r1
    383c:	08 95       	ret

0000383e <__udivmodsi4>:
    383e:	a1 e2       	ldi	r26, 0x21	; 33
    3840:	1a 2e       	mov	r1, r26
    3842:	aa 1b       	sub	r26, r26
    3844:	bb 1b       	sub	r27, r27
    3846:	fd 01       	movw	r30, r26
    3848:	0d c0       	rjmp	.+26     	; 0x3864 <__udivmodsi4_ep>

0000384a <__udivmodsi4_loop>:
    384a:	aa 1f       	adc	r26, r26
    384c:	bb 1f       	adc	r27, r27
    384e:	ee 1f       	adc	r30, r30
    3850:	ff 1f       	adc	r31, r31
    3852:	a2 17       	cp	r26, r18
    3854:	b3 07       	cpc	r27, r19
    3856:	e4 07       	cpc	r30, r20
    3858:	f5 07       	cpc	r31, r21
    385a:	20 f0       	brcs	.+8      	; 0x3864 <__udivmodsi4_ep>
    385c:	a2 1b       	sub	r26, r18
    385e:	b3 0b       	sbc	r27, r19
    3860:	e4 0b       	sbc	r30, r20
    3862:	f5 0b       	sbc	r31, r21

00003864 <__udivmodsi4_ep>:
    3864:	66 1f       	adc	r22, r22
    3866:	77 1f       	adc	r23, r23
    3868:	88 1f       	adc	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	1a 94       	dec	r1
    386e:	69 f7       	brne	.-38     	; 0x384a <__udivmodsi4_loop>
    3870:	60 95       	com	r22
    3872:	70 95       	com	r23
    3874:	80 95       	com	r24
    3876:	90 95       	com	r25
    3878:	9b 01       	movw	r18, r22
    387a:	ac 01       	movw	r20, r24
    387c:	bd 01       	movw	r22, r26
    387e:	cf 01       	movw	r24, r30
    3880:	08 95       	ret

00003882 <__divmodsi4>:
    3882:	97 fb       	bst	r25, 7
    3884:	09 2e       	mov	r0, r25
    3886:	05 26       	eor	r0, r21
    3888:	0e d0       	rcall	.+28     	; 0x38a6 <__divmodsi4_neg1>
    388a:	57 fd       	sbrc	r21, 7
    388c:	04 d0       	rcall	.+8      	; 0x3896 <__divmodsi4_neg2>
    388e:	d7 df       	rcall	.-82     	; 0x383e <__udivmodsi4>
    3890:	0a d0       	rcall	.+20     	; 0x38a6 <__divmodsi4_neg1>
    3892:	00 1c       	adc	r0, r0
    3894:	38 f4       	brcc	.+14     	; 0x38a4 <__divmodsi4_exit>

00003896 <__divmodsi4_neg2>:
    3896:	50 95       	com	r21
    3898:	40 95       	com	r20
    389a:	30 95       	com	r19
    389c:	21 95       	neg	r18
    389e:	3f 4f       	sbci	r19, 0xFF	; 255
    38a0:	4f 4f       	sbci	r20, 0xFF	; 255
    38a2:	5f 4f       	sbci	r21, 0xFF	; 255

000038a4 <__divmodsi4_exit>:
    38a4:	08 95       	ret

000038a6 <__divmodsi4_neg1>:
    38a6:	f6 f7       	brtc	.-4      	; 0x38a4 <__divmodsi4_exit>
    38a8:	90 95       	com	r25
    38aa:	80 95       	com	r24
    38ac:	70 95       	com	r23
    38ae:	61 95       	neg	r22
    38b0:	7f 4f       	sbci	r23, 0xFF	; 255
    38b2:	8f 4f       	sbci	r24, 0xFF	; 255
    38b4:	9f 4f       	sbci	r25, 0xFF	; 255
    38b6:	08 95       	ret

000038b8 <__prologue_saves__>:
    38b8:	2f 92       	push	r2
    38ba:	3f 92       	push	r3
    38bc:	4f 92       	push	r4
    38be:	5f 92       	push	r5
    38c0:	6f 92       	push	r6
    38c2:	7f 92       	push	r7
    38c4:	8f 92       	push	r8
    38c6:	9f 92       	push	r9
    38c8:	af 92       	push	r10
    38ca:	bf 92       	push	r11
    38cc:	cf 92       	push	r12
    38ce:	df 92       	push	r13
    38d0:	ef 92       	push	r14
    38d2:	ff 92       	push	r15
    38d4:	0f 93       	push	r16
    38d6:	1f 93       	push	r17
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	ca 1b       	sub	r28, r26
    38e2:	db 0b       	sbc	r29, r27
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	09 94       	ijmp

000038f0 <__epilogue_restores__>:
    38f0:	2a 88       	ldd	r2, Y+18	; 0x12
    38f2:	39 88       	ldd	r3, Y+17	; 0x11
    38f4:	48 88       	ldd	r4, Y+16	; 0x10
    38f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    38fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    38fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3900:	aa 84       	ldd	r10, Y+10	; 0x0a
    3902:	b9 84       	ldd	r11, Y+9	; 0x09
    3904:	c8 84       	ldd	r12, Y+8	; 0x08
    3906:	df 80       	ldd	r13, Y+7	; 0x07
    3908:	ee 80       	ldd	r14, Y+6	; 0x06
    390a:	fd 80       	ldd	r15, Y+5	; 0x05
    390c:	0c 81       	ldd	r16, Y+4	; 0x04
    390e:	1b 81       	ldd	r17, Y+3	; 0x03
    3910:	aa 81       	ldd	r26, Y+2	; 0x02
    3912:	b9 81       	ldd	r27, Y+1	; 0x01
    3914:	ce 0f       	add	r28, r30
    3916:	d1 1d       	adc	r29, r1
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	ed 01       	movw	r28, r26
    3924:	08 95       	ret

00003926 <itoa>:
    3926:	fb 01       	movw	r30, r22
    3928:	9f 01       	movw	r18, r30
    392a:	e8 94       	clt
    392c:	42 30       	cpi	r20, 0x02	; 2
    392e:	c4 f0       	brlt	.+48     	; 0x3960 <itoa+0x3a>
    3930:	45 32       	cpi	r20, 0x25	; 37
    3932:	b4 f4       	brge	.+44     	; 0x3960 <itoa+0x3a>
    3934:	4a 30       	cpi	r20, 0x0A	; 10
    3936:	29 f4       	brne	.+10     	; 0x3942 <itoa+0x1c>
    3938:	97 fb       	bst	r25, 7
    393a:	1e f4       	brtc	.+6      	; 0x3942 <itoa+0x1c>
    393c:	90 95       	com	r25
    393e:	81 95       	neg	r24
    3940:	9f 4f       	sbci	r25, 0xFF	; 255
    3942:	64 2f       	mov	r22, r20
    3944:	77 27       	eor	r23, r23
    3946:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    394a:	80 5d       	subi	r24, 0xD0	; 208
    394c:	8a 33       	cpi	r24, 0x3A	; 58
    394e:	0c f0       	brlt	.+2      	; 0x3952 <itoa+0x2c>
    3950:	89 5d       	subi	r24, 0xD9	; 217
    3952:	81 93       	st	Z+, r24
    3954:	cb 01       	movw	r24, r22
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	a1 f7       	brne	.-24     	; 0x3942 <itoa+0x1c>
    395a:	16 f4       	brtc	.+4      	; 0x3960 <itoa+0x3a>
    395c:	5d e2       	ldi	r21, 0x2D	; 45
    395e:	51 93       	st	Z+, r21
    3960:	10 82       	st	Z, r1
    3962:	c9 01       	movw	r24, r18
    3964:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <strrev>

00003968 <strrev>:
    3968:	dc 01       	movw	r26, r24
    396a:	fc 01       	movw	r30, r24
    396c:	67 2f       	mov	r22, r23
    396e:	71 91       	ld	r23, Z+
    3970:	77 23       	and	r23, r23
    3972:	e1 f7       	brne	.-8      	; 0x396c <strrev+0x4>
    3974:	32 97       	sbiw	r30, 0x02	; 2
    3976:	04 c0       	rjmp	.+8      	; 0x3980 <strrev+0x18>
    3978:	7c 91       	ld	r23, X
    397a:	6d 93       	st	X+, r22
    397c:	70 83       	st	Z, r23
    397e:	62 91       	ld	r22, -Z
    3980:	ae 17       	cp	r26, r30
    3982:	bf 07       	cpc	r27, r31
    3984:	c8 f3       	brcs	.-14     	; 0x3978 <strrev+0x10>
    3986:	08 95       	ret

00003988 <__udivmodhi4>:
    3988:	aa 1b       	sub	r26, r26
    398a:	bb 1b       	sub	r27, r27
    398c:	51 e1       	ldi	r21, 0x11	; 17
    398e:	07 c0       	rjmp	.+14     	; 0x399e <__udivmodhi4_ep>

00003990 <__udivmodhi4_loop>:
    3990:	aa 1f       	adc	r26, r26
    3992:	bb 1f       	adc	r27, r27
    3994:	a6 17       	cp	r26, r22
    3996:	b7 07       	cpc	r27, r23
    3998:	10 f0       	brcs	.+4      	; 0x399e <__udivmodhi4_ep>
    399a:	a6 1b       	sub	r26, r22
    399c:	b7 0b       	sbc	r27, r23

0000399e <__udivmodhi4_ep>:
    399e:	88 1f       	adc	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	5a 95       	dec	r21
    39a4:	a9 f7       	brne	.-22     	; 0x3990 <__udivmodhi4_loop>
    39a6:	80 95       	com	r24
    39a8:	90 95       	com	r25
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	08 95       	ret

000039b0 <_exit>:
    39b0:	f8 94       	cli

000039b2 <__stop_program>:
    39b2:	ff cf       	rjmp	.-2      	; 0x39b2 <__stop_program>
